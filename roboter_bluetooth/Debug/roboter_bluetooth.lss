
roboter_bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000636  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000006aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001401  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e1f  00000000  00000000  00001bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d2c  00000000  00000000  00002a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00003740  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000673  00000000  00000000  000038c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a2  00000000  00000000  00003f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000045dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 09 03 	jmp	0x612	; 0x612 <__vector_25>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a1 30       	cpi	r26, 0x01	; 1
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 cd 02 	call	0x59a	; 0x59a <main>
  cc:	0c 94 19 03 	jmp	0x632	; 0x632 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <bluetooth_init>:


void bluetooth_init(void)
{
	//Activate the send and receive pins
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);
  d4:	e9 ec       	ldi	r30, 0xC9	; 201
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 61       	ori	r24, 0x18	; 24
  dc:	80 83       	st	Z, r24
	
	//Interrupt enablen
	UCSR1B |= (1 << RXCIE1);
  de:	80 81       	ld	r24, Z
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	80 83       	st	Z, r24
	
	//Serial infterface configuration
	UCSR1C = 0b00000110;		//0b 00						00			011					0 
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
								//   Asynchronos Usart		Parity		8Bit receive		clock parity
								
	UBRR1H = (uint8_t)(UART_BAUD_RATE_CALC(UART_BAUD_RATE,F_CPU) >> 8);
  ea:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)UART_BAUD_RATE_CALC(UART_BAUD_RATE,F_CPU);
  ee:	87 e6       	ldi	r24, 0x67	; 103
  f0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
  f4:	08 95       	ret

000000f6 <drive>:

void drive(unsigned char dir_motr, unsigned char pwm_rechts, unsigned char dir_motl, unsigned char pwm_links)
{

	// MOTOR RECHTS
	if (dir_motr == 2)				//Motor rechts Stopp
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	19 f4       	brne	.+6      	; 0x100 <drive+0xa>
	{
		OCR4B = 0;					//rechts PWM=0
  fa:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
  fe:	17 c0       	rjmp	.+46     	; 0x12e <drive+0x38>
	}
	else if (dir_motr == 1)			//rechts mit PWM vorwärts
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	59 f4       	brne	.+22     	; 0x11a <drive+0x24>
	{
		if ((pwm_rechts>=PWM_R_STOPP)&&(pwm_rechts<PWM_R_VOR_MAX+1)) {OCR4B = pwm_rechts;}
 104:	82 ea       	ldi	r24, 0xA2	; 162
 106:	86 0f       	add	r24, r22
 108:	80 32       	cpi	r24, 0x20	; 32
 10a:	18 f4       	brcc	.+6      	; 0x112 <drive+0x1c>
 10c:	60 93 d0 00 	sts	0x00D0, r22	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
 110:	0e c0       	rjmp	.+28     	; 0x12e <drive+0x38>
		else {OCR4B = PWM_R_VOR_MAX;}			//vollgas rechts vor
 112:	8d e7       	ldi	r24, 0x7D	; 125
 114:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
 118:	0a c0       	rjmp	.+20     	; 0x12e <drive+0x38>
	}
	else
	{
		if ((pwm_rechts<=PWM_R_STOPP)&&(pwm_rechts>PWM_R_RET_MAX-1)) {OCR4B = pwm_rechts;}			//rechts mit PWM retour
 11a:	82 ec       	ldi	r24, 0xC2	; 194
 11c:	86 0f       	add	r24, r22
 11e:	81 32       	cpi	r24, 0x21	; 33
 120:	18 f4       	brcc	.+6      	; 0x128 <drive+0x32>
 122:	60 93 d0 00 	sts	0x00D0, r22	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
 126:	03 c0       	rjmp	.+6      	; 0x12e <drive+0x38>
		else {OCR4B = PWM_R_RET_MAX;}			//vollgas rechts retour
 128:	8e e3       	ldi	r24, 0x3E	; 62
 12a:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
	}

	// MOTOR LINKS
	if (dir_motl == 2)				//Motor links Stopp
 12e:	42 30       	cpi	r20, 0x02	; 2
 130:	19 f4       	brne	.+6      	; 0x138 <drive+0x42>
	{
		OCR4D = 0;					//links PWM=0
 132:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
 136:	08 95       	ret
	}
	else if (dir_motl == 1)			//links mit PWM vorwärts
 138:	41 30       	cpi	r20, 0x01	; 1
 13a:	59 f4       	brne	.+22     	; 0x152 <drive+0x5c>
	{
		if ((pwm_links>PWM_L_VOR_MAX-1)&&(pwm_links<=PWM_L_STOPP)) {OCR4D = pwm_links;}
 13c:	82 ec       	ldi	r24, 0xC2	; 194
 13e:	82 0f       	add	r24, r18
 140:	81 32       	cpi	r24, 0x21	; 33
 142:	18 f4       	brcc	.+6      	; 0x14a <drive+0x54>
 144:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
 148:	08 95       	ret
		else {OCR4D = PWM_L_VOR_MAX;}		//vollgas links  vor
 14a:	8e e3       	ldi	r24, 0x3E	; 62
 14c:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
 150:	08 95       	ret
	}
	else
	{
		if ((pwm_links>=PWM_L_STOPP)&&(pwm_links<PWM_L_RET_MAX+1)) {OCR4D = pwm_links;}	//links mit PWM retour
 152:	82 ea       	ldi	r24, 0xA2	; 162
 154:	82 0f       	add	r24, r18
 156:	80 32       	cpi	r24, 0x20	; 32
 158:	18 f4       	brcc	.+6      	; 0x160 <drive+0x6a>
 15a:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
 15e:	08 95       	ret
		else {OCR4D = PWM_L_RET_MAX;}		//vollgas links retour
 160:	8d e7       	ldi	r24, 0x7D	; 125
 162:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
 166:	08 95       	ret

00000168 <adc_measure>:

unsigned int adc_measure(unsigned char channel)
{
	unsigned int result=0;

	ADMUX &= ~(1<<REFS1)&~(1<<REFS0);			//ext. AREF = 5V
 168:	ec e7       	ldi	r30, 0x7C	; 124
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	90 81       	ld	r25, Z
 16e:	9f 73       	andi	r25, 0x3F	; 63
 170:	90 83       	st	Z, r25
	ADMUX &= ~(1<<ADLAR);						//rechttsbündig
 172:	90 81       	ld	r25, Z
 174:	9f 7d       	andi	r25, 0xDF	; 223
 176:	90 83       	st	Z, r25

	ADCSRB &= ~(1<<MUX5);
 178:	ab e7       	ldi	r26, 0x7B	; 123
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	9c 91       	ld	r25, X
 17e:	9f 7d       	andi	r25, 0xDF	; 223
 180:	9c 93       	st	X, r25
	ADMUX &= ~(1<<MUX4)&~(1<<MUX3);
 182:	90 81       	ld	r25, Z
 184:	97 7e       	andi	r25, 0xE7	; 231
 186:	90 83       	st	Z, r25
	if (channel == 0) {ADMUX &= ~(1<<MUX2)&~(1<<MUX1)&~(1<<MUX0);}			//ADC0 single ended Messung Measure UB
 188:	81 11       	cpse	r24, r1
 18a:	04 c0       	rjmp	.+8      	; 0x194 <adc_measure+0x2c>
 18c:	80 81       	ld	r24, Z
 18e:	88 7f       	andi	r24, 0xF8	; 248
 190:	80 83       	st	Z, r24
 192:	15 c0       	rjmp	.+42     	; 0x1be <adc_measure+0x56>
	if (channel == 1) {ADMUX &= ~(1<<MUX2)&~(1<<MUX1);ADMUX |= (1<<MUX0);}	//ADC1 single ended Messung LF left  (IR Empfänger links)
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	49 f4       	brne	.+18     	; 0x1aa <adc_measure+0x42>
 198:	ec e7       	ldi	r30, 0x7C	; 124
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	89 7f       	andi	r24, 0xF9	; 249
 1a0:	80 83       	st	Z, r24
 1a2:	80 81       	ld	r24, Z
 1a4:	81 60       	ori	r24, 0x01	; 1
 1a6:	80 83       	st	Z, r24
 1a8:	0a c0       	rjmp	.+20     	; 0x1be <adc_measure+0x56>
	if (channel == 4) {ADMUX |=  (1<<MUX2);ADMUX &= ~(1<<MUX1)&~(1<<MUX0);}	//ADC4 single ended Messung LF right (IR Empfänger rechts)
 1aa:	84 30       	cpi	r24, 0x04	; 4
 1ac:	41 f4       	brne	.+16     	; 0x1be <adc_measure+0x56>
 1ae:	ec e7       	ldi	r30, 0x7C	; 124
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	84 60       	ori	r24, 0x04	; 4
 1b6:	80 83       	st	Z, r24
 1b8:	80 81       	ld	r24, Z
 1ba:	8c 7f       	andi	r24, 0xFC	; 252
 1bc:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	//ADC einschalten, Teiler auf 128 -> 125kHz Samplingfrequenz
 1be:	ea e7       	ldi	r30, 0x7A	; 122
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	87 68       	ori	r24, 0x87	; 135
 1c6:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC);						//start
 1c8:	80 81       	ld	r24, Z
 1ca:	80 64       	ori	r24, 0x40	; 64
 1cc:	80 83       	st	Z, r24
	while(ADCSRA&(1<<ADSC));					//warten auf Wandlungsende
 1ce:	80 81       	ld	r24, Z
 1d0:	86 fd       	sbrc	r24, 6
 1d2:	fd cf       	rjmp	.-6      	; 0x1ce <adc_measure+0x66>
	result = ADCW;
 1d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1d8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return result;
}
 1dc:	08 95       	ret

000001de <akkuzustand>:


void akkuzustand (void)
{
 1de:	cf 93       	push	r28
 1e0:	ca e0       	ldi	r28, 0x0A	; 10
	unsigned int akku;
	unsigned char i;
	
	for (i=0;i<10;i++) {akku = adc_measure(MEASURE_UB);}
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 b4 00 	call	0x168	; 0x168 <adc_measure>
 1e8:	c1 50       	subi	r28, 0x01	; 1
 1ea:	d9 f7       	brne	.-10     	; 0x1e2 <akkuzustand+0x4>
	if (akku >822)										//Akku voll,	 7,2V >= Vcc > 6,8V  grün
 1ec:	87 33       	cpi	r24, 0x37	; 55
 1ee:	23 e0       	ldi	r18, 0x03	; 3
 1f0:	92 07       	cpc	r25, r18
 1f2:	10 f0       	brcs	.+4      	; 0x1f8 <akkuzustand+0x1a>
	{PORTB|=(1<<LED_GRUEN); PORTB&=~(1<<LED_ROT);}
 1f4:	2c 9a       	sbi	0x05, 4	; 5
 1f6:	2d 98       	cbi	0x05, 5	; 5
	if ((akku<=822)&&(akku>744))						//Akku halbvoll, 6,8V >= Vcc > 6,4V  gelb
 1f8:	9c 01       	movw	r18, r24
 1fa:	29 5e       	subi	r18, 0xE9	; 233
 1fc:	32 40       	sbci	r19, 0x02	; 2
 1fe:	2e 34       	cpi	r18, 0x4E	; 78
 200:	31 05       	cpc	r19, r1
 202:	10 f4       	brcc	.+4      	; 0x208 <akkuzustand+0x2a>
	{PORTB|=(1<<LED_GRUEN); PORTB|=(1<<LED_ROT);}
 204:	2c 9a       	sbi	0x05, 4	; 5
 206:	2d 9a       	sbi	0x05, 5	; 5
	if (akku<=744)										//Akku leer,	 6,4V >= Vcc		 rot +  ENDE
 208:	89 3e       	cpi	r24, 0xE9	; 233
 20a:	92 40       	sbci	r25, 0x02	; 2
 20c:	d8 f4       	brcc	.+54     	; 0x244 <akkuzustand+0x66>
	{PORTB&=~(1<<LED_GRUEN); PORTB|=(1<<LED_ROT);
 20e:	2c 98       	cbi	0x05, 4	; 5
 210:	2d 9a       	sbi	0x05, 5	; 5
		cli();										//alle Interrupts aus
 212:	f8 94       	cli
		TCCR4B &= 0xF0;							//alle Motoren stopp, Motor PWM aus
 214:	e1 ec       	ldi	r30, 0xC1	; 193
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	80 7f       	andi	r24, 0xF0	; 240
 21c:	80 83       	st	Z, r24
		PORTB  &= 0x30;							//alle LEDs am Ring aus, Beeper und Motor right aus
 21e:	85 b1       	in	r24, 0x05	; 5
 220:	80 73       	andi	r24, 0x30	; 48
 222:	85 b9       	out	0x05, r24	; 5
		PORTD  =  0x08;							//Motor left und alle IR-Sender aus
 224:	88 e0       	ldi	r24, 0x08	; 8
 226:	8b b9       	out	0x0b, r24	; 11
		while(1)
		{
			PORTB^=(1<<LED_ROT);				//rote Duo LED blinkt in Endlsschleife = E N D E !!!!
 228:	90 e2       	ldi	r25, 0x20	; 32
 22a:	85 b1       	in	r24, 0x05	; 5
 22c:	89 27       	eor	r24, r25
 22e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	22 e5       	ldi	r18, 0x52	; 82
 234:	37 e0       	ldi	r19, 0x07	; 7
 236:	81 50       	subi	r24, 0x01	; 1
 238:	20 40       	sbci	r18, 0x00	; 0
 23a:	30 40       	sbci	r19, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <akkuzustand+0x58>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <akkuzustand+0x62>
 240:	00 00       	nop
 242:	f3 cf       	rjmp	.-26     	; 0x22a <akkuzustand+0x4c>
			_delay_ms(150);
		}
	}
}
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <roboter_init>:


void roboter_init(void)
{	
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
	CLKPR = 0x80;
 24c:	e1 e6       	ldi	r30, 0x61	; 97
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 e8       	ldi	r24, 0x80	; 128
 252:	80 83       	st	Z, r24
	CLKPR = 0x00;						//CLK_IO = f_quarz = 16 MHz, Teiler 1
 254:	10 82       	st	Z, r1
	

	//LED Pins
	DDRB = DDRB |(1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB3);	//LED Pins
 256:	84 b1       	in	r24, 0x04	; 4
 258:	8f 60       	ori	r24, 0x0F	; 15
 25a:	84 b9       	out	0x04, r24	; 4
	//DDRD = DDRD |(1<<DDD2)|(1<<DDD3);						//Duo LED Pins		//Disabled for Bluetooth


	//Akkuspannung
	DDRF = DDRF &~(1<<MEASURE_UB);		//ADC0	PF0
 25c:	80 98       	cbi	0x10, 0	; 16

	//Motoren Pins
	DDRB = DDRB | (1<<DDB6);			//PWM-Output OC4B für MOTOR_RECHTS
 25e:	26 9a       	sbi	0x04, 6	; 4
	DDRD = DDRD | (1<<DDD7);			//PWM-Output OC4D für MOTOR_LINKS
 260:	57 9a       	sbi	0x0a, 7	; 10

	//Timer 4 im Fast PWM Mode konfigurieren
	TCCR4A = TCCR4A | (1<<PWM4B);
 262:	a0 ec       	ldi	r26, 0xC0	; 192
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	8c 91       	ld	r24, X
 268:	81 60       	ori	r24, 0x01	; 1
 26a:	8c 93       	st	X, r24
	TCCR4C = TCCR4C | (1<<PWM4D);
 26c:	e2 ec       	ldi	r30, 0xC2	; 194
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	81 60       	ori	r24, 0x01	; 1
 274:	80 83       	st	Z, r24
	TCCR4D = TCCR4D &~(1<<WGM41);
 276:	c3 ec       	ldi	r28, 0xC3	; 195
 278:	d0 e0       	ldi	r29, 0x00	; 0
 27a:	88 81       	ld	r24, Y
 27c:	8d 7f       	andi	r24, 0xFD	; 253
 27e:	88 83       	st	Y, r24
	TCCR4D = TCCR4D &~(1<<WGM40);		//Fast PWM am OC4B und OC4D
 280:	88 81       	ld	r24, Y
 282:	8e 7f       	andi	r24, 0xFE	; 254
 284:	88 83       	st	Y, r24

	TCCR4A = TCCR4A &~(1<<COM4B0);
 286:	8c 91       	ld	r24, X
 288:	8f 7e       	andi	r24, 0xEF	; 239
 28a:	8c 93       	st	X, r24
	TCCR4A = TCCR4A | (1<<COM4B1);		//COM4B1:0=2
 28c:	8c 91       	ld	r24, X
 28e:	80 62       	ori	r24, 0x20	; 32
 290:	8c 93       	st	X, r24

	TCCR4C = TCCR4C &~(1<<COM4D0);
 292:	80 81       	ld	r24, Z
 294:	8b 7f       	andi	r24, 0xFB	; 251
 296:	80 83       	st	Z, r24
	TCCR4C = TCCR4C | (1<<COM4D1);		//COM4D1:0=2
 298:	80 81       	ld	r24, Z
 29a:	88 60       	ori	r24, 0x08	; 8
 29c:	80 83       	st	Z, r24

	TC4H = 0x03;
 29e:	ef eb       	ldi	r30, 0xBF	; 191
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	80 83       	st	Z, r24
	OCR4C = 0xE8;						//f_PWM = f_CLK_T4/(1+OCR4C) = 62,5kHz/1000 = 62,5 Hz
 2a6:	88 ee       	ldi	r24, 0xE8	; 232
 2a8:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>
	TC4H = 0x00;
 2ac:	10 82       	st	Z, r1
	OCR4B = 94;							//Tastverhältnis am OC4B-Pin (PB6), PWM_rechts (retour_max = 62, vor_max = 125, stopp = 94)
 2ae:	8e e5       	ldi	r24, 0x5E	; 94
 2b0:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
	OCR4D = 94;							//Tastverhältnis am OC4D-Pin (PD7), PWM_links  (retour_max = 62, vor_max = 125, stopp = 94)
 2b4:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>


	TCCR4B = TCCR4B | (1<<CS43);
 2b8:	e1 ec       	ldi	r30, 0xC1	; 193
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	88 60       	ori	r24, 0x08	; 8
 2c0:	80 83       	st	Z, r24
	TCCR4B = TCCR4B &~(1<<CS42);
 2c2:	80 81       	ld	r24, Z
 2c4:	8b 7f       	andi	r24, 0xFB	; 251
 2c6:	80 83       	st	Z, r24
	TCCR4B = TCCR4B &~(1<<CS41);		//f_CLK_T4 = CLK_IO/Prescaler = 16MHz/256 = 62,5kHz
 2c8:	80 81       	ld	r24, Z
 2ca:	8d 7f       	andi	r24, 0xFD	; 253
 2cc:	80 83       	st	Z, r24
	TCCR4B = TCCR4B | (1<<CS40);		//Timer4 Prescaler = 1, Start PWM
 2ce:	80 81       	ld	r24, Z
 2d0:	81 60       	ori	r24, 0x01	; 1
 2d2:	80 83       	st	Z, r24


	
	akkuzustand();						//ein paar mal messen damit ADC warm läuft
 2d4:	0e 94 ef 00 	call	0x1de	; 0x1de <akkuzustand>
	akkuzustand();
 2d8:	0e 94 ef 00 	call	0x1de	; 0x1de <akkuzustand>
	akkuzustand();
 2dc:	0e 94 ef 00 	call	0x1de	; 0x1de <akkuzustand>
	akkuzustand();
 2e0:	0e 94 ef 00 	call	0x1de	; 0x1de <akkuzustand>
	akkuzustand();
 2e4:	0e 94 ef 00 	call	0x1de	; 0x1de <akkuzustand>
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <write_i2c>:

void LCD_string(char *data)
{
	while (*data != '\0')				//bis zum letzten Zeichen
	{LCD_data(*data++);}
}
 2ee:	ef e3       	ldi	r30, 0x3F	; 63
 2f0:	ff e1       	ldi	r31, 0x1F	; 31
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <write_i2c+0x4>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <write_i2c+0xa>
 2f8:	00 00       	nop
 2fa:	ec eb       	ldi	r30, 0xBC	; 188
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	90 81       	ld	r25, Z
 300:	94 6a       	ori	r25, 0xA4	; 164
 302:	90 83       	st	Z, r25
 304:	90 81       	ld	r25, Z
 306:	99 23       	and	r25, r25
 308:	ec f7       	brge	.-6      	; 0x304 <write_i2c+0x16>
 30a:	8e 7f       	andi	r24, 0xFE	; 254
 30c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 310:	84 e8       	ldi	r24, 0x84	; 132
 312:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 316:	ec eb       	ldi	r30, 0xBC	; 188
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	88 23       	and	r24, r24
 31e:	ec f7       	brge	.-6      	; 0x31a <write_i2c+0x2c>
 320:	8a e0       	ldi	r24, 0x0A	; 10
 322:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 326:	84 e8       	ldi	r24, 0x84	; 132
 328:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 32c:	ec eb       	ldi	r30, 0xBC	; 188
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	88 23       	and	r24, r24
 334:	ec f7       	brge	.-6      	; 0x330 <write_i2c+0x42>
 336:	86 2f       	mov	r24, r22
 338:	80 62       	ori	r24, 0x20	; 32
 33a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 33e:	84 e8       	ldi	r24, 0x84	; 132
 340:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 344:	ec eb       	ldi	r30, 0xBC	; 188
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	88 23       	and	r24, r24
 34c:	ec f7       	brge	.-6      	; 0x348 <write_i2c+0x5a>
 34e:	6f 7d       	andi	r22, 0xDF	; 223
 350:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 354:	84 e8       	ldi	r24, 0x84	; 132
 356:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 35a:	ec eb       	ldi	r30, 0xBC	; 188
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	88 23       	and	r24, r24
 362:	ec f7       	brge	.-6      	; 0x35e <write_i2c+0x70>
 364:	ec eb       	ldi	r30, 0xBC	; 188
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	84 69       	ori	r24, 0x94	; 148
 36c:	80 83       	st	Z, r24
 36e:	08 95       	ret

00000370 <LCD_data>:
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	d8 2f       	mov	r29, r24
 376:	88 23       	and	r24, r24
 378:	14 f0       	brlt	.+4      	; 0x37e <LCD_data+0xe>
 37a:	c0 ef       	ldi	r28, 0xF0	; 240
 37c:	01 c0       	rjmp	.+2      	; 0x380 <LCD_data+0x10>
 37e:	c8 ef       	ldi	r28, 0xF8	; 248
 380:	d6 ff       	sbrs	r29, 6
 382:	02 c0       	rjmp	.+4      	; 0x388 <LCD_data+0x18>
 384:	c4 60       	ori	r28, 0x04	; 4
 386:	01 c0       	rjmp	.+2      	; 0x38a <LCD_data+0x1a>
 388:	cb 7f       	andi	r28, 0xFB	; 251
 38a:	d5 ff       	sbrs	r29, 5
 38c:	02 c0       	rjmp	.+4      	; 0x392 <LCD_data+0x22>
 38e:	c2 60       	ori	r28, 0x02	; 2
 390:	01 c0       	rjmp	.+2      	; 0x394 <LCD_data+0x24>
 392:	cd 7f       	andi	r28, 0xFD	; 253
 394:	d4 ff       	sbrs	r29, 4
 396:	02 c0       	rjmp	.+4      	; 0x39c <LCD_data+0x2c>
 398:	c1 60       	ori	r28, 0x01	; 1
 39a:	01 c0       	rjmp	.+2      	; 0x39e <LCD_data+0x2e>
 39c:	ce 7f       	andi	r28, 0xFE	; 254
 39e:	6c 2f       	mov	r22, r28
 3a0:	80 e4       	ldi	r24, 0x40	; 64
 3a2:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_i2c>
 3a6:	d3 ff       	sbrs	r29, 3
 3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <LCD_data+0x40>
 3aa:	6c 2f       	mov	r22, r28
 3ac:	68 60       	ori	r22, 0x08	; 8
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <LCD_data+0x44>
 3b0:	6c 2f       	mov	r22, r28
 3b2:	67 7f       	andi	r22, 0xF7	; 247
 3b4:	d2 ff       	sbrs	r29, 2
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <LCD_data+0x4c>
 3b8:	64 60       	ori	r22, 0x04	; 4
 3ba:	01 c0       	rjmp	.+2      	; 0x3be <LCD_data+0x4e>
 3bc:	6b 7f       	andi	r22, 0xFB	; 251
 3be:	d1 ff       	sbrs	r29, 1
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <LCD_data+0x56>
 3c2:	62 60       	ori	r22, 0x02	; 2
 3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <LCD_data+0x58>
 3c6:	6d 7f       	andi	r22, 0xFD	; 253
 3c8:	d0 ff       	sbrs	r29, 0
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <LCD_data+0x60>
 3cc:	61 60       	ori	r22, 0x01	; 1
 3ce:	01 c0       	rjmp	.+2      	; 0x3d2 <LCD_data+0x62>
 3d0:	6e 7f       	andi	r22, 0xFE	; 254
 3d2:	80 e4       	ldi	r24, 0x40	; 64
 3d4:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_i2c>
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <LCD_cmd>:
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	d8 2f       	mov	r29, r24
 3e4:	88 23       	and	r24, r24
 3e6:	14 f0       	brlt	.+4      	; 0x3ec <LCD_cmd+0xe>
 3e8:	c0 ee       	ldi	r28, 0xE0	; 224
 3ea:	01 c0       	rjmp	.+2      	; 0x3ee <LCD_cmd+0x10>
 3ec:	c8 ee       	ldi	r28, 0xE8	; 232
 3ee:	d6 ff       	sbrs	r29, 6
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <LCD_cmd+0x18>
 3f2:	c4 60       	ori	r28, 0x04	; 4
 3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <LCD_cmd+0x1a>
 3f6:	cb 7f       	andi	r28, 0xFB	; 251
 3f8:	d5 ff       	sbrs	r29, 5
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fc:	c2 60       	ori	r28, 0x02	; 2
 3fe:	01 c0       	rjmp	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	cd 7f       	andi	r28, 0xFD	; 253
 402:	d4 ff       	sbrs	r29, 4
 404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 406:	c1 60       	ori	r28, 0x01	; 1
 408:	01 c0       	rjmp	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	ce 7f       	andi	r28, 0xFE	; 254
 40c:	6c 2f       	mov	r22, r28
 40e:	80 e4       	ldi	r24, 0x40	; 64
 410:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_i2c>
 414:	d3 ff       	sbrs	r29, 3
 416:	03 c0       	rjmp	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 418:	6c 2f       	mov	r22, r28
 41a:	68 60       	ori	r22, 0x08	; 8
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41e:	6c 2f       	mov	r22, r28
 420:	67 7f       	andi	r22, 0xF7	; 247
 422:	d2 ff       	sbrs	r29, 2
 424:	02 c0       	rjmp	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 426:	64 60       	ori	r22, 0x04	; 4
 428:	01 c0       	rjmp	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42a:	6b 7f       	andi	r22, 0xFB	; 251
 42c:	d1 ff       	sbrs	r29, 1
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 430:	62 60       	ori	r22, 0x02	; 2
 432:	01 c0       	rjmp	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 434:	6d 7f       	andi	r22, 0xFD	; 253
 436:	d0 ff       	sbrs	r29, 0
 438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43a:	61 60       	ori	r22, 0x01	; 1
 43c:	01 c0       	rjmp	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43e:	6e 7f       	andi	r22, 0xFE	; 254
 440:	80 e4       	ldi	r24, 0x40	; 64
 442:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_i2c>
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <LCD_init>:
 44c:	2f ef       	ldi	r18, 0xFF	; 255
 44e:	80 e7       	ldi	r24, 0x70	; 112
 450:	92 e0       	ldi	r25, 0x02	; 2
 452:	21 50       	subi	r18, 0x01	; 1
 454:	80 40       	sbci	r24, 0x00	; 0
 456:	90 40       	sbci	r25, 0x00	; 0
 458:	e1 f7       	brne	.-8      	; 0x452 <LCD_init+0x6>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <LCD_init+0x10>
 45c:	00 00       	nop
 45e:	63 ee       	ldi	r22, 0xE3	; 227
 460:	80 e4       	ldi	r24, 0x40	; 64
 462:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_i2c>
 466:	8f e3       	ldi	r24, 0x3F	; 63
 468:	9c e9       	ldi	r25, 0x9C	; 156
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <LCD_init+0x1e>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <LCD_init+0x24>
 470:	00 00       	nop
 472:	63 ee       	ldi	r22, 0xE3	; 227
 474:	80 e4       	ldi	r24, 0x40	; 64
 476:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_i2c>
 47a:	8f e1       	ldi	r24, 0x1F	; 31
 47c:	93 e0       	ldi	r25, 0x03	; 3
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <LCD_init+0x32>
 482:	00 c0       	rjmp	.+0      	; 0x484 <LCD_init+0x38>
 484:	00 00       	nop
 486:	63 ee       	ldi	r22, 0xE3	; 227
 488:	80 e4       	ldi	r24, 0x40	; 64
 48a:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_i2c>
 48e:	62 ee       	ldi	r22, 0xE2	; 226
 490:	80 e4       	ldi	r24, 0x40	; 64
 492:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_i2c>
 496:	62 ee       	ldi	r22, 0xE2	; 226
 498:	80 e4       	ldi	r24, 0x40	; 64
 49a:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_i2c>
 49e:	68 ee       	ldi	r22, 0xE8	; 232
 4a0:	80 e4       	ldi	r24, 0x40	; 64
 4a2:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_i2c>
 4a6:	60 ee       	ldi	r22, 0xE0	; 224
 4a8:	80 e4       	ldi	r24, 0x40	; 64
 4aa:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_i2c>
 4ae:	68 ee       	ldi	r22, 0xE8	; 232
 4b0:	80 e4       	ldi	r24, 0x40	; 64
 4b2:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_i2c>
 4b6:	60 ee       	ldi	r22, 0xE0	; 224
 4b8:	80 e4       	ldi	r24, 0x40	; 64
 4ba:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_i2c>
 4be:	61 ee       	ldi	r22, 0xE1	; 225
 4c0:	80 e4       	ldi	r24, 0x40	; 64
 4c2:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_i2c>
 4c6:	60 ee       	ldi	r22, 0xE0	; 224
 4c8:	80 e4       	ldi	r24, 0x40	; 64
 4ca:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_i2c>
 4ce:	63 ee       	ldi	r22, 0xE3	; 227
 4d0:	80 e4       	ldi	r24, 0x40	; 64
 4d2:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_i2c>
 4d6:	60 ee       	ldi	r22, 0xE0	; 224
 4d8:	80 e4       	ldi	r24, 0x40	; 64
 4da:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_i2c>
 4de:	6f ee       	ldi	r22, 0xEF	; 239
 4e0:	80 e4       	ldi	r24, 0x40	; 64
 4e2:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_i2c>
 4e6:	08 95       	ret

000004e8 <I2C_init>:
	//
	////////////////////////////////////////////////////////////////////////////

	///////////////// IOCON konfigurieren ///////////////////
	
	TWCR = TWCR|(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		//START
 4e8:	ec eb       	ldi	r30, 0xBC	; 188
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	84 6a       	ori	r24, 0xA4	; 164
 4f0:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 4f2:	80 81       	ld	r24, Z
 4f4:	88 23       	and	r24, r24
 4f6:	ec f7       	brge	.-6      	; 0x4f2 <I2C_init+0xa>

	TWDR = 0b01000000;									//Adr. 0100 000W + Write (W=0)
 4f8:	80 e4       	ldi	r24, 0x40	; 64
 4fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//senden
 4fe:	84 e8       	ldi	r24, 0x84	; 132
 500:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 504:	ec eb       	ldi	r30, 0xBC	; 188
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	88 23       	and	r24, r24
 50c:	ec f7       	brge	.-6      	; 0x508 <I2C_init+0x20>

	TWDR = 0x05;										//Registeradr. IOCON schicken
 50e:	85 e0       	ldi	r24, 0x05	; 5
 510:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//Registeradr. senden
 514:	84 e8       	ldi	r24, 0x84	; 132
 516:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 51a:	ec eb       	ldi	r30, 0xBC	; 188
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	88 23       	and	r24, r24
 522:	ec f7       	brge	.-6      	; 0x51e <I2C_init+0x36>
	
	TWDR = 0x2A;										//IOCON konfigurieren: Byte Mode, Slew Rate enable, kein Open Drain bei INTn, INTn actice-high
 524:	8a e2       	ldi	r24, 0x2A	; 42
 526:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//Konf. senden
 52a:	84 e8       	ldi	r24, 0x84	; 132
 52c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 530:	ec eb       	ldi	r30, 0xBC	; 188
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	88 23       	and	r24, r24
 538:	ec f7       	brge	.-6      	; 0x534 <I2C_init+0x4c>
	
	TWCR = TWCR|(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);		//STOP
 53a:	ec eb       	ldi	r30, 0xBC	; 188
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	84 69       	ori	r24, 0x94	; 148
 542:	80 83       	st	Z, r24
	

	///////////////// GP mit IODIR als OUTPUT konfigurieren ///////////////////
	
	TWCR = TWCR|(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		//START
 544:	80 81       	ld	r24, Z
 546:	84 6a       	ori	r24, 0xA4	; 164
 548:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 54a:	80 81       	ld	r24, Z
 54c:	88 23       	and	r24, r24
 54e:	ec f7       	brge	.-6      	; 0x54a <I2C_init+0x62>

	TWDR = 0b01000000;									//Adr. 0100 000W + Write (W=0)
 550:	80 e4       	ldi	r24, 0x40	; 64
 552:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//senden
 556:	84 e8       	ldi	r24, 0x84	; 132
 558:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 55c:	ec eb       	ldi	r30, 0xBC	; 188
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	80 81       	ld	r24, Z
 562:	88 23       	and	r24, r24
 564:	ec f7       	brge	.-6      	; 0x560 <I2C_init+0x78>

	TWDR = 0x00;										//Registeradr. IODIR schicken
 566:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//Registeradr. senden
 56a:	84 e8       	ldi	r24, 0x84	; 132
 56c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 570:	ec eb       	ldi	r30, 0xBC	; 188
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	80 81       	ld	r24, Z
 576:	88 23       	and	r24, r24
 578:	ec f7       	brge	.-6      	; 0x574 <I2C_init+0x8c>
	
	TWDR = 0x00;										//IODIR konfigurieren, alle Pins als OUTPUT
 57a:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//Konf. senden
 57e:	84 e8       	ldi	r24, 0x84	; 132
 580:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 584:	ec eb       	ldi	r30, 0xBC	; 188
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	80 81       	ld	r24, Z
 58a:	88 23       	and	r24, r24
 58c:	ec f7       	brge	.-6      	; 0x588 <I2C_init+0xa0>
	
	TWCR = TWCR|(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);		//STOP
 58e:	ec eb       	ldi	r30, 0xBC	; 188
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	80 81       	ld	r24, Z
 594:	84 69       	ori	r24, 0x94	; 148
 596:	80 83       	st	Z, r24
 598:	08 95       	ret

0000059a <main>:
unsigned char bReceive = 0;

int main(void)
{
	
	JTAG_DISABLE();
 59a:	85 b7       	in	r24, 0x35	; 53
 59c:	80 68       	ori	r24, 0x80	; 128
 59e:	85 bf       	out	0x35, r24	; 53
 5a0:	85 b7       	in	r24, 0x35	; 53
 5a2:	80 68       	ori	r24, 0x80	; 128
 5a4:	85 bf       	out	0x35, r24	; 53
    /************************************/
    /* I2C - IO - Expander				*/
    /************************************/

    DDRC |= IO_RESET;					//PC6 ist #RST vom Portexpander
 5a6:	3e 9a       	sbi	0x07, 6	; 7
    PORTC |= IO_RESET;					//Portexpander ein
 5a8:	46 9a       	sbi	0x08, 6	; 8

    TWBR = 12;							//TWBR=12, TWPS=0 im Reg. TWSR per default, damit f_SCL = 400 kHz
 5aa:	8c e0       	ldi	r24, 0x0C	; 12
 5ac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    
    I2C_init();							//I2C Initialisierung
 5b0:	0e 94 74 02 	call	0x4e8	; 0x4e8 <I2C_init>
	LCD_init();
 5b4:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_init>
    roboter_init();
 5b8:	0e 94 24 01 	call	0x248	; 0x248 <roboter_init>
	bluetooth_init();
 5bc:	0e 94 6a 00 	call	0xd4	; 0xd4 <bluetooth_init>
	
	sei();
 5c0:	78 94       	sei
	
	drive(MOT_FAST_STOPP, PWM_R_STOPP, MOT_FAST_STOPP, PWM_L_STOPP);
 5c2:	2e e5       	ldi	r18, 0x5E	; 94
 5c4:	42 e0       	ldi	r20, 0x02	; 2
 5c6:	6e e5       	ldi	r22, 0x5E	; 94
 5c8:	82 e0       	ldi	r24, 0x02	; 2
 5ca:	0e 94 7b 00 	call	0xf6	; 0xf6 <drive>
	
	LCD_data( 'x' );
 5ce:	88 e7       	ldi	r24, 0x78	; 120
 5d0:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_data>
 5d4:	2f ef       	ldi	r18, 0xFF	; 255
 5d6:	83 ed       	ldi	r24, 0xD3	; 211
 5d8:	90 e3       	ldi	r25, 0x30	; 48
 5da:	21 50       	subi	r18, 0x01	; 1
 5dc:	80 40       	sbci	r24, 0x00	; 0
 5de:	90 40       	sbci	r25, 0x00	; 0
 5e0:	e1 f7       	brne	.-8      	; 0x5da <main+0x40>
 5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <main+0x4a>
 5e4:	00 00       	nop
	_delay_ms(1000);
	LCD_cmd(LCD_CLEAR);
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_cmd>
	
    while (1) 
    {		
		if(bReceive != 0)
 5ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 5f0:	88 23       	and	r24, r24
 5f2:	f1 f3       	breq	.-4      	; 0x5f0 <main+0x56>
		{
			LCD_data(bReceive);
 5f4:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_data>
 5f8:	2f ef       	ldi	r18, 0xFF	; 255
 5fa:	83 ed       	ldi	r24, 0xD3	; 211
 5fc:	90 e3       	ldi	r25, 0x30	; 48
 5fe:	21 50       	subi	r18, 0x01	; 1
 600:	80 40       	sbci	r24, 0x00	; 0
 602:	90 40       	sbci	r25, 0x00	; 0
 604:	e1 f7       	brne	.-8      	; 0x5fe <main+0x64>
 606:	00 c0       	rjmp	.+0      	; 0x608 <main+0x6e>
 608:	00 00       	nop
			_delay_ms(1000);
			LCD_cmd(LCD_CLEAR);
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_cmd>
 610:	ed cf       	rjmp	.-38     	; 0x5ec <main+0x52>

00000612 <__vector_25>:
    }
}


ISR(USART1_RX_vect)
{
 612:	1f 92       	push	r1
 614:	0f 92       	push	r0
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	0f 92       	push	r0
 61a:	11 24       	eor	r1, r1
 61c:	8f 93       	push	r24
	bReceive = UDR1;
 61e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 622:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 626:	8f 91       	pop	r24
 628:	0f 90       	pop	r0
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	0f 90       	pop	r0
 62e:	1f 90       	pop	r1
 630:	18 95       	reti

00000632 <_exit>:
 632:	f8 94       	cli

00000634 <__stop_program>:
 634:	ff cf       	rjmp	.-2      	; 0x634 <__stop_program>
