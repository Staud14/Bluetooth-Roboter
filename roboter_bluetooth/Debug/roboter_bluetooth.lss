
roboter_bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000066a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000006de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000710  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001384  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db9  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd1  00000000  00000000  0000296d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00003540  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068e  00000000  00000000  0000371c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000080d  00000000  00000000  00003daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000045b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__vector_25>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_29>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a4 30       	cpi	r26, 0x04	; 4
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 c5 02 	call	0x58a	; 0x58a <main>
  cc:	0c 94 33 03 	jmp	0x666	; 0x666 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <bluetooth_init>:


void bluetooth_init(void)
{		
	//Serial infterface configuration
	UCSR1C = 0b00000110;		//0b 00						00			011					0 
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
								//   Asynchronos Usart		Parity		8Bit receive		clock parity
								
	UBRR1H = (uint8_t)(UART_BAUD_RATE_CALC(UART_BAUD_RATE,F_CPU) >> 8);
  da:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)UART_BAUD_RATE_CALC(UART_BAUD_RATE,F_CPU);
  de:	87 e6       	ldi	r24, 0x67	; 103
  e0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	//Interrupt enablen
	UCSR1B |= (1 << RXCIE1);
  e4:	e9 ec       	ldi	r30, 0xC9	; 201
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	80 83       	st	Z, r24
	
	//Activate the send and receive pins
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);
  ee:	80 81       	ld	r24, Z
  f0:	88 61       	ori	r24, 0x18	; 24
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <bprintf>:
	
}

unsigned int bprintf(char trans)
{
	while( ! (UCSR1A & (1<<UDRE1)));		//warte bis UDR bereit		UDRE in UCSR1A = 0 wenn sende puffer leer
  f6:	e8 ec       	ldi	r30, 0xC8	; 200
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	90 81       	ld	r25, Z
  fc:	95 ff       	sbrs	r25, 5
  fe:	fd cf       	rjmp	.-6      	; 0xfa <bprintf+0x4>
	UDR1 = trans;
 100:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	return TRANSMITTED;
}
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	08 95       	ret

0000010a <drive>:

void drive(unsigned char select, unsigned char mot_pwm)
{

	// MOTOR RECHTS
	if (select == MOTR)					//Motor rechts
 10a:	80 34       	cpi	r24, 0x40	; 64
 10c:	19 f4       	brne	.+6      	; 0x114 <drive+0xa>
	{
		OCR4B = mot_pwm;				//rechts PWM
 10e:	60 93 d0 00 	sts	0x00D0, r22	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
 112:	08 95       	ret
	}
	
	
	// MOTOR LINKS
	if (select == MOTL)				//Motor links
 114:	80 38       	cpi	r24, 0x80	; 128
 116:	11 f4       	brne	.+4      	; 0x11c <drive+0x12>
	{
		OCR4D = mot_pwm;				//links PWM
 118:	60 93 d2 00 	sts	0x00D2, r22	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
 11c:	08 95       	ret

0000011e <adc_measure>:

unsigned int adc_measure(unsigned char channel)
{
	unsigned int result=0;

	ADMUX &= ~(1<<REFS1)&~(1<<REFS0);			//ext. AREF = 5V
 11e:	ec e7       	ldi	r30, 0x7C	; 124
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	90 81       	ld	r25, Z
 124:	9f 73       	andi	r25, 0x3F	; 63
 126:	90 83       	st	Z, r25
	ADMUX &= ~(1<<ADLAR);						//rechttsbündig
 128:	90 81       	ld	r25, Z
 12a:	9f 7d       	andi	r25, 0xDF	; 223
 12c:	90 83       	st	Z, r25

	ADCSRB &= ~(1<<MUX5);
 12e:	ab e7       	ldi	r26, 0x7B	; 123
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	9c 91       	ld	r25, X
 134:	9f 7d       	andi	r25, 0xDF	; 223
 136:	9c 93       	st	X, r25
	ADMUX &= ~(1<<MUX4)&~(1<<MUX3);
 138:	90 81       	ld	r25, Z
 13a:	97 7e       	andi	r25, 0xE7	; 231
 13c:	90 83       	st	Z, r25
	if (channel == 0) {ADMUX &= ~(1<<MUX2)&~(1<<MUX1)&~(1<<MUX0);}			//ADC0 single ended Messung Measure UB
 13e:	81 11       	cpse	r24, r1
 140:	04 c0       	rjmp	.+8      	; 0x14a <adc_measure+0x2c>
 142:	80 81       	ld	r24, Z
 144:	88 7f       	andi	r24, 0xF8	; 248
 146:	80 83       	st	Z, r24
 148:	15 c0       	rjmp	.+42     	; 0x174 <adc_measure+0x56>
	if (channel == 1) {ADMUX &= ~(1<<MUX2)&~(1<<MUX1);ADMUX |= (1<<MUX0);}	//ADC1 single ended Messung LF left  (IR Empfänger links)
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	49 f4       	brne	.+18     	; 0x160 <adc_measure+0x42>
 14e:	ec e7       	ldi	r30, 0x7C	; 124
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	89 7f       	andi	r24, 0xF9	; 249
 156:	80 83       	st	Z, r24
 158:	80 81       	ld	r24, Z
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	80 83       	st	Z, r24
 15e:	0a c0       	rjmp	.+20     	; 0x174 <adc_measure+0x56>
	if (channel == 4) {ADMUX |=  (1<<MUX2);ADMUX &= ~(1<<MUX1)&~(1<<MUX0);}	//ADC4 single ended Messung LF right (IR Empfänger rechts)
 160:	84 30       	cpi	r24, 0x04	; 4
 162:	41 f4       	brne	.+16     	; 0x174 <adc_measure+0x56>
 164:	ec e7       	ldi	r30, 0x7C	; 124
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	84 60       	ori	r24, 0x04	; 4
 16c:	80 83       	st	Z, r24
 16e:	80 81       	ld	r24, Z
 170:	8c 7f       	andi	r24, 0xFC	; 252
 172:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	//ADC einschalten, Teiler auf 128 -> 125kHz Samplingfrequenz
 174:	ea e7       	ldi	r30, 0x7A	; 122
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	87 68       	ori	r24, 0x87	; 135
 17c:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC);						//start
 17e:	80 81       	ld	r24, Z
 180:	80 64       	ori	r24, 0x40	; 64
 182:	80 83       	st	Z, r24
	while(ADCSRA&(1<<ADSC));					//warten auf Wandlungsende
 184:	80 81       	ld	r24, Z
 186:	86 fd       	sbrc	r24, 6
 188:	fd cf       	rjmp	.-6      	; 0x184 <adc_measure+0x66>
	result = ADCW;
 18a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 18e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return result;
}
 192:	08 95       	ret

00000194 <akkuzustand>:


void akkuzustand (void)
{
 194:	cf 93       	push	r28
 196:	ca e0       	ldi	r28, 0x0A	; 10
	unsigned int akku;
	unsigned char i;
	
	for (i=0;i<10;i++) {akku = adc_measure(MEASURE_UB);}
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 8f 00 	call	0x11e	; 0x11e <adc_measure>
 19e:	c1 50       	subi	r28, 0x01	; 1
 1a0:	d9 f7       	brne	.-10     	; 0x198 <akkuzustand+0x4>
	if (akku >822)										//Akku voll,	 7,2V >= Vcc > 6,8V  grün
 1a2:	87 33       	cpi	r24, 0x37	; 55
 1a4:	23 e0       	ldi	r18, 0x03	; 3
 1a6:	92 07       	cpc	r25, r18
 1a8:	10 f0       	brcs	.+4      	; 0x1ae <akkuzustand+0x1a>
	{PORTB|=(1<<LED_GRUEN); PORTB&=~(1<<LED_ROT);}
 1aa:	2c 9a       	sbi	0x05, 4	; 5
 1ac:	2d 98       	cbi	0x05, 5	; 5
	if ((akku<=822)&&(akku>744))						//Akku halbvoll, 6,8V >= Vcc > 6,4V  gelb
 1ae:	9c 01       	movw	r18, r24
 1b0:	29 5e       	subi	r18, 0xE9	; 233
 1b2:	32 40       	sbci	r19, 0x02	; 2
 1b4:	2e 34       	cpi	r18, 0x4E	; 78
 1b6:	31 05       	cpc	r19, r1
 1b8:	10 f4       	brcc	.+4      	; 0x1be <akkuzustand+0x2a>
	{PORTB|=(1<<LED_GRUEN); PORTB|=(1<<LED_ROT);}
 1ba:	2c 9a       	sbi	0x05, 4	; 5
 1bc:	2d 9a       	sbi	0x05, 5	; 5
	if (akku<=744)										//Akku leer,	 6,4V >= Vcc		 rot +  ENDE
 1be:	89 3e       	cpi	r24, 0xE9	; 233
 1c0:	92 40       	sbci	r25, 0x02	; 2
 1c2:	d8 f4       	brcc	.+54     	; 0x1fa <akkuzustand+0x66>
	{PORTB&=~(1<<LED_GRUEN); PORTB|=(1<<LED_ROT);
 1c4:	2c 98       	cbi	0x05, 4	; 5
 1c6:	2d 9a       	sbi	0x05, 5	; 5
		cli();										//alle Interrupts aus
 1c8:	f8 94       	cli
		TCCR4B &= 0xF0;							//alle Motoren stopp, Motor PWM aus
 1ca:	e1 ec       	ldi	r30, 0xC1	; 193
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	80 7f       	andi	r24, 0xF0	; 240
 1d2:	80 83       	st	Z, r24
		PORTB  &= 0x30;							//alle LEDs am Ring aus, Beeper und Motor right aus
 1d4:	85 b1       	in	r24, 0x05	; 5
 1d6:	80 73       	andi	r24, 0x30	; 48
 1d8:	85 b9       	out	0x05, r24	; 5
		PORTD  =  0x08;							//Motor left und alle IR-Sender aus
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	8b b9       	out	0x0b, r24	; 11
		while(1)
		{
			PORTB^=(1<<LED_ROT);				//rote Duo LED blinkt in Endlsschleife = E N D E !!!!
 1de:	90 e2       	ldi	r25, 0x20	; 32
 1e0:	85 b1       	in	r24, 0x05	; 5
 1e2:	89 27       	eor	r24, r25
 1e4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	22 e5       	ldi	r18, 0x52	; 82
 1ea:	37 e0       	ldi	r19, 0x07	; 7
 1ec:	81 50       	subi	r24, 0x01	; 1
 1ee:	20 40       	sbci	r18, 0x00	; 0
 1f0:	30 40       	sbci	r19, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <akkuzustand+0x58>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <akkuzustand+0x62>
 1f6:	00 00       	nop
 1f8:	f3 cf       	rjmp	.-26     	; 0x1e0 <akkuzustand+0x4c>
			_delay_ms(150);
		}
	}
}
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <roboter_init>:


void roboter_init(void)
{	
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
	CLKPR = 0x80;
 202:	e1 e6       	ldi	r30, 0x61	; 97
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	80 83       	st	Z, r24
	CLKPR = 0x00;						//CLK_IO = f_quarz = 16 MHz, Teiler 1
 20a:	10 82       	st	Z, r1
	

	//LED Pins
	DDRB = DDRB |(1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB3);	//LED Pins
 20c:	84 b1       	in	r24, 0x04	; 4
 20e:	8f 60       	ori	r24, 0x0F	; 15
 210:	84 b9       	out	0x04, r24	; 4
	//DDRD = DDRD |(1<<DDD2)|(1<<DDD3);						//Duo LED Pins		//Disabled for Bluetooth


	//Akkuspannung
	DDRF = DDRF &~(1<<MEASURE_UB);		//ADC0	PF0
 212:	80 98       	cbi	0x10, 0	; 16

	//Motoren Pins
	DDRB = DDRB | (1<<DDB6);			//PWM-Output OC4B für MOTOR_RECHTS
 214:	26 9a       	sbi	0x04, 6	; 4
	DDRD = DDRD | (1<<DDD7);			//PWM-Output OC4D für MOTOR_LINKS
 216:	57 9a       	sbi	0x0a, 7	; 10

	//Timer 4 im Fast PWM Mode konfigurieren
	TCCR4A = TCCR4A | (1<<PWM4B);
 218:	a0 ec       	ldi	r26, 0xC0	; 192
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	8c 91       	ld	r24, X
 21e:	81 60       	ori	r24, 0x01	; 1
 220:	8c 93       	st	X, r24
	TCCR4C = TCCR4C | (1<<PWM4D);
 222:	e2 ec       	ldi	r30, 0xC2	; 194
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	81 60       	ori	r24, 0x01	; 1
 22a:	80 83       	st	Z, r24
	TCCR4D = TCCR4D &~(1<<WGM41);
 22c:	c3 ec       	ldi	r28, 0xC3	; 195
 22e:	d0 e0       	ldi	r29, 0x00	; 0
 230:	88 81       	ld	r24, Y
 232:	8d 7f       	andi	r24, 0xFD	; 253
 234:	88 83       	st	Y, r24
	TCCR4D = TCCR4D &~(1<<WGM40);		//Fast PWM am OC4B und OC4D
 236:	88 81       	ld	r24, Y
 238:	8e 7f       	andi	r24, 0xFE	; 254
 23a:	88 83       	st	Y, r24

	TCCR4A = TCCR4A &~(1<<COM4B0);
 23c:	8c 91       	ld	r24, X
 23e:	8f 7e       	andi	r24, 0xEF	; 239
 240:	8c 93       	st	X, r24
	TCCR4A = TCCR4A | (1<<COM4B1);		//COM4B1:0=2
 242:	8c 91       	ld	r24, X
 244:	80 62       	ori	r24, 0x20	; 32
 246:	8c 93       	st	X, r24

	TCCR4C = TCCR4C &~(1<<COM4D0);
 248:	80 81       	ld	r24, Z
 24a:	8b 7f       	andi	r24, 0xFB	; 251
 24c:	80 83       	st	Z, r24
	TCCR4C = TCCR4C | (1<<COM4D1);		//COM4D1:0=2
 24e:	80 81       	ld	r24, Z
 250:	88 60       	ori	r24, 0x08	; 8
 252:	80 83       	st	Z, r24

	TC4H = 0x03;
 254:	ef eb       	ldi	r30, 0xBF	; 191
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	80 83       	st	Z, r24
	OCR4C = 0xE8;						//f_PWM = f_CLK_T4/(1+OCR4C) = 62,5kHz/1000 = 62,5 Hz
 25c:	88 ee       	ldi	r24, 0xE8	; 232
 25e:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>
	TC4H = 0x00;
 262:	10 82       	st	Z, r1
	OCR4B = 94;							//Tastverhältnis am OC4B-Pin (PB6), PWM_rechts (retour_max = 62, vor_max = 125, stopp = 94)
 264:	8e e5       	ldi	r24, 0x5E	; 94
 266:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
	OCR4D = 94;							//Tastverhältnis am OC4D-Pin (PD7), PWM_links  (retour_max = 62, vor_max = 125, stopp = 94)
 26a:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>


	TCCR4B = TCCR4B | (1<<CS43);
 26e:	e1 ec       	ldi	r30, 0xC1	; 193
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	88 60       	ori	r24, 0x08	; 8
 276:	80 83       	st	Z, r24
	TCCR4B = TCCR4B &~(1<<CS42);
 278:	80 81       	ld	r24, Z
 27a:	8b 7f       	andi	r24, 0xFB	; 251
 27c:	80 83       	st	Z, r24
	TCCR4B = TCCR4B &~(1<<CS41);		//f_CLK_T4 = CLK_IO/Prescaler = 16MHz/256 = 62,5kHz
 27e:	80 81       	ld	r24, Z
 280:	8d 7f       	andi	r24, 0xFD	; 253
 282:	80 83       	st	Z, r24
	TCCR4B = TCCR4B | (1<<CS40);		//Timer4 Prescaler = 1, Start PWM
 284:	80 81       	ld	r24, Z
 286:	81 60       	ori	r24, 0x01	; 1
 288:	80 83       	st	Z, r24
	TCNT0 = PRELOAD_TIMER0;
	TIMSK0 |= (1 << TOIE0);
#endif

	
	akkuzustand();						//ein paar mal messen damit ADC warm läuft
 28a:	0e 94 ca 00 	call	0x194	; 0x194 <akkuzustand>
	akkuzustand();
 28e:	0e 94 ca 00 	call	0x194	; 0x194 <akkuzustand>
	akkuzustand();
 292:	0e 94 ca 00 	call	0x194	; 0x194 <akkuzustand>
	akkuzustand();
 296:	0e 94 ca 00 	call	0x194	; 0x194 <akkuzustand>
	akkuzustand();
 29a:	0e 94 ca 00 	call	0x194	; 0x194 <akkuzustand>
}
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <__vector_29>:
}

#endif

ISR(ADC_vect)
{
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	5f 93       	push	r21
 2b4:	6f 93       	push	r22
 2b6:	7f 93       	push	r23
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	ef 93       	push	r30
 2c2:	ff 93       	push	r31
	unsigned int wait;
	unsigned char x, y;

	newAkkuLevel = ADCH;
 2c4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2c8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <newAkkuLevel>
	if (akkuLevel > newAkkuLevel)
 2cc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <akkuLevel>
 2d0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <newAkkuLevel>
 2d4:	89 17       	cp	r24, r25
 2d6:	20 f4       	brcc	.+8      	; 0x2e0 <__vector_29+0x3c>
	akkuLevel = newAkkuLevel;
 2d8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <newAkkuLevel>
 2dc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <akkuLevel>

	if (firstCheck)
 2e0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <firstCheck>
 2e4:	88 23       	and	r24, r24
 2e6:	09 f4       	brne	.+2      	; 0x2ea <__vector_29+0x46>
 2e8:	3e c0       	rjmp	.+124    	; 0x366 <__vector_29+0xc2>
	{
		firstCheck = FALSE;
 2ea:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <firstCheck>

		PORTB |= (1<<LED_LV)|(1<<LED_LH);
 2ee:	85 b1       	in	r24, 0x05	; 5
 2f0:	8c 60       	ori	r24, 0x0C	; 12
 2f2:	85 b9       	out	0x05, r24	; 5
		PORTB |= (1<<LED_RV)|(1<<LED_RH);
 2f4:	85 b1       	in	r24, 0x05	; 5
 2f6:	83 60       	ori	r24, 0x03	; 3
 2f8:	85 b9       	out	0x05, r24	; 5


		if (akkuLevel > 210)
 2fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <akkuLevel>
 2fe:	83 3d       	cpi	r24, 0xD3	; 211
 300:	00 f1       	brcs	.+64     	; 0x342 <__vector_29+0x9e>
		{
			x = (akkuLevel - 200) / 5;
 302:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <akkuLevel>
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	88 5c       	subi	r24, 0xC8	; 200
 30a:	91 09       	sbc	r25, r1
 30c:	65 e0       	ldi	r22, 0x05	; 5
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	0e 94 0b 03 	call	0x616	; 0x616 <__divmodhi4>
 314:	86 2f       	mov	r24, r22

			PORTB &= ~(1 << LED_GRUEN);
 316:	2c 98       	cbi	0x05, 4	; 5
			for (y = 0; y < x; y++)
 318:	61 11       	cpse	r22, r1
 31a:	0f c0       	rjmp	.+30     	; 0x33a <__vector_29+0x96>
 31c:	22 c0       	rjmp	.+68     	; 0x362 <__vector_29+0xbe>
			{
				for(wait = 0; wait < 60000; wait++)  PORTB |=  (1 << LED_GRUEN);
 31e:	2c 9a       	sbi	0x05, 4	; 5
 320:	21 50       	subi	r18, 0x01	; 1
 322:	31 09       	sbc	r19, r1
 324:	e1 f7       	brne	.-8      	; 0x31e <__vector_29+0x7a>
 326:	20 e6       	ldi	r18, 0x60	; 96
 328:	3a ee       	ldi	r19, 0xEA	; 234
				for(wait = 0; wait < 60000; wait++)  PORTB &= ~(1 << LED_GRUEN);
 32a:	2c 98       	cbi	0x05, 4	; 5
 32c:	21 50       	subi	r18, 0x01	; 1
 32e:	31 09       	sbc	r19, r1
 330:	e1 f7       	brne	.-8      	; 0x32a <__vector_29+0x86>
		if (akkuLevel > 210)
		{
			x = (akkuLevel - 200) / 5;

			PORTB &= ~(1 << LED_GRUEN);
			for (y = 0; y < x; y++)
 332:	9f 5f       	subi	r25, 0xFF	; 255
 334:	89 13       	cpse	r24, r25
 336:	02 c0       	rjmp	.+4      	; 0x33c <__vector_29+0x98>
 338:	14 c0       	rjmp	.+40     	; 0x362 <__vector_29+0xbe>
 33a:	90 e0       	ldi	r25, 0x00	; 0
}

#endif

ISR(ADC_vect)
{
 33c:	20 e6       	ldi	r18, 0x60	; 96
 33e:	3a ee       	ldi	r19, 0xEA	; 234
 340:	ee cf       	rjmp	.-36     	; 0x31e <__vector_29+0x7a>
			{
				for(wait = 0; wait < 60000; wait++)  PORTB |=  (1 << LED_GRUEN);
				for(wait = 0; wait < 60000; wait++)  PORTB &= ~(1 << LED_GRUEN);
			}
		}
		else if (akkuLevel > 205)
 342:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <akkuLevel>
 346:	8e 3c       	cpi	r24, 0xCE	; 206
 348:	38 f0       	brcs	.+14     	; 0x358 <__vector_29+0xb4>
 34a:	80 e6       	ldi	r24, 0x60	; 96
 34c:	9a ee       	ldi	r25, 0xEA	; 234
		{

			for(wait = 0; wait < 60000; wait++)
			{
				PORTB |= (1 << LED_ROT);
 34e:	2d 9a       	sbi	0x05, 5	; 5
				PORTB |= (1 << LED_GRUEN);
 350:	2c 9a       	sbi	0x05, 4	; 5
 352:	01 97       	sbiw	r24, 0x01	; 1
			}
		}
		else if (akkuLevel > 205)
		{

			for(wait = 0; wait < 60000; wait++)
 354:	e1 f7       	brne	.-8      	; 0x34e <__vector_29+0xaa>
 356:	05 c0       	rjmp	.+10     	; 0x362 <__vector_29+0xbe>
 358:	80 e6       	ldi	r24, 0x60	; 96
 35a:	9a ee       	ldi	r25, 0xEA	; 234
				PORTB |= (1 << LED_GRUEN);
			}
		}
		else
		{
			for(wait = 0; wait < 60000; wait++)  PORTB |= (1 << LED_ROT);
 35c:	2d 9a       	sbi	0x05, 5	; 5
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	e9 f7       	brne	.-6      	; 0x35c <__vector_29+0xb8>
		}
		PORTB &= ~(1 << LED_GRUEN);
 362:	2c 98       	cbi	0x05, 4	; 5
		PORTB &= ~(1 << LED_ROT);
 364:	2d 98       	cbi	0x05, 5	; 5
	}

	if (akkuLevel < 200)
 366:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <akkuLevel>
 36a:	88 3c       	cpi	r24, 0xC8	; 200
 36c:	b0 f4       	brcc	.+44     	; 0x39a <__vector_29+0xf6>
	{

		TCCR4B &= 0xF0;		//alle Motoren stopp, Motor PWM aus
 36e:	e1 ec       	ldi	r30, 0xC1	; 193
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	80 7f       	andi	r24, 0xF0	; 240
 376:	80 83       	st	Z, r24
		PORTB  &= 0x30;		//alle LEDs am Ring aus, Beeper und Motor right aus
 378:	85 b1       	in	r24, 0x05	; 5
 37a:	80 73       	andi	r24, 0x30	; 48
 37c:	85 b9       	out	0x05, r24	; 5
		PORTD  =  0x08;		//Motor left und alle IR-Sender aus
 37e:	88 e0       	ldi	r24, 0x08	; 8
 380:	8b b9       	out	0x0b, r24	; 11

		cli();
 382:	f8 94       	cli
 384:	80 e6       	ldi	r24, 0x60	; 96
 386:	9a ee       	ldi	r25, 0xEA	; 234
		while(1)
		{
			for(wait = 0; wait < 60000; wait++)  PORTB |= (1 << LED_ROT);
 388:	2d 9a       	sbi	0x05, 5	; 5
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	e9 f7       	brne	.-6      	; 0x388 <__vector_29+0xe4>
 38e:	80 e4       	ldi	r24, 0x40	; 64
 390:	9c e9       	ldi	r25, 0x9C	; 156
			for(wait = 0; wait < 40000; wait++)  PORTB &= ~(1 << LED_ROT);
 392:	2d 98       	cbi	0x05, 5	; 5
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	e9 f7       	brne	.-6      	; 0x392 <__vector_29+0xee>
 398:	f5 cf       	rjmp	.-22     	; 0x384 <__vector_29+0xe0>
		PORTB &= ~(1<<LED_RV) & ~(1<<LED_RH);

	}


 39a:	ff 91       	pop	r31
 39c:	ef 91       	pop	r30
 39e:	bf 91       	pop	r27
 3a0:	af 91       	pop	r26
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	7f 91       	pop	r23
 3a8:	6f 91       	pop	r22
 3aa:	5f 91       	pop	r21
 3ac:	3f 91       	pop	r19
 3ae:	2f 91       	pop	r18
 3b0:	0f 90       	pop	r0
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	0f 90       	pop	r0
 3b6:	1f 90       	pop	r1
 3b8:	18 95       	reti

000003ba <write_i2c>:

void LCD_string(char *data)
{
	while (*data != '\0')				//bis zum letzten Zeichen
	{LCD_data(*data++);}
}
 3ba:	ef e3       	ldi	r30, 0x3F	; 63
 3bc:	ff e1       	ldi	r31, 0x1F	; 31
 3be:	31 97       	sbiw	r30, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <write_i2c+0x4>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <write_i2c+0xa>
 3c4:	00 00       	nop
 3c6:	ec eb       	ldi	r30, 0xBC	; 188
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	90 81       	ld	r25, Z
 3cc:	94 6a       	ori	r25, 0xA4	; 164
 3ce:	90 83       	st	Z, r25
 3d0:	90 81       	ld	r25, Z
 3d2:	99 23       	and	r25, r25
 3d4:	ec f7       	brge	.-6      	; 0x3d0 <write_i2c+0x16>
 3d6:	8e 7f       	andi	r24, 0xFE	; 254
 3d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 3dc:	84 e8       	ldi	r24, 0x84	; 132
 3de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3e2:	ec eb       	ldi	r30, 0xBC	; 188
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	88 23       	and	r24, r24
 3ea:	ec f7       	brge	.-6      	; 0x3e6 <write_i2c+0x2c>
 3ec:	8a e0       	ldi	r24, 0x0A	; 10
 3ee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 3f2:	84 e8       	ldi	r24, 0x84	; 132
 3f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3f8:	ec eb       	ldi	r30, 0xBC	; 188
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	88 23       	and	r24, r24
 400:	ec f7       	brge	.-6      	; 0x3fc <write_i2c+0x42>
 402:	86 2f       	mov	r24, r22
 404:	80 62       	ori	r24, 0x20	; 32
 406:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 40a:	84 e8       	ldi	r24, 0x84	; 132
 40c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 410:	ec eb       	ldi	r30, 0xBC	; 188
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	88 23       	and	r24, r24
 418:	ec f7       	brge	.-6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41a:	6f 7d       	andi	r22, 0xDF	; 223
 41c:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 420:	84 e8       	ldi	r24, 0x84	; 132
 422:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 426:	ec eb       	ldi	r30, 0xBC	; 188
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	88 23       	and	r24, r24
 42e:	ec f7       	brge	.-6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 430:	ec eb       	ldi	r30, 0xBC	; 188
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	84 69       	ori	r24, 0x94	; 148
 438:	80 83       	st	Z, r24
 43a:	08 95       	ret

0000043c <LCD_init>:
 43c:	2f ef       	ldi	r18, 0xFF	; 255
 43e:	80 e7       	ldi	r24, 0x70	; 112
 440:	92 e0       	ldi	r25, 0x02	; 2
 442:	21 50       	subi	r18, 0x01	; 1
 444:	80 40       	sbci	r24, 0x00	; 0
 446:	90 40       	sbci	r25, 0x00	; 0
 448:	e1 f7       	brne	.-8      	; 0x442 <LCD_init+0x6>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <LCD_init+0x10>
 44c:	00 00       	nop
 44e:	63 ee       	ldi	r22, 0xE3	; 227
 450:	80 e4       	ldi	r24, 0x40	; 64
 452:	0e 94 dd 01 	call	0x3ba	; 0x3ba <write_i2c>
 456:	8f e3       	ldi	r24, 0x3F	; 63
 458:	9c e9       	ldi	r25, 0x9C	; 156
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <LCD_init+0x1e>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <LCD_init+0x24>
 460:	00 00       	nop
 462:	63 ee       	ldi	r22, 0xE3	; 227
 464:	80 e4       	ldi	r24, 0x40	; 64
 466:	0e 94 dd 01 	call	0x3ba	; 0x3ba <write_i2c>
 46a:	8f e1       	ldi	r24, 0x1F	; 31
 46c:	93 e0       	ldi	r25, 0x03	; 3
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <LCD_init+0x32>
 472:	00 c0       	rjmp	.+0      	; 0x474 <LCD_init+0x38>
 474:	00 00       	nop
 476:	63 ee       	ldi	r22, 0xE3	; 227
 478:	80 e4       	ldi	r24, 0x40	; 64
 47a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <write_i2c>
 47e:	62 ee       	ldi	r22, 0xE2	; 226
 480:	80 e4       	ldi	r24, 0x40	; 64
 482:	0e 94 dd 01 	call	0x3ba	; 0x3ba <write_i2c>
 486:	62 ee       	ldi	r22, 0xE2	; 226
 488:	80 e4       	ldi	r24, 0x40	; 64
 48a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <write_i2c>
 48e:	68 ee       	ldi	r22, 0xE8	; 232
 490:	80 e4       	ldi	r24, 0x40	; 64
 492:	0e 94 dd 01 	call	0x3ba	; 0x3ba <write_i2c>
 496:	60 ee       	ldi	r22, 0xE0	; 224
 498:	80 e4       	ldi	r24, 0x40	; 64
 49a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <write_i2c>
 49e:	68 ee       	ldi	r22, 0xE8	; 232
 4a0:	80 e4       	ldi	r24, 0x40	; 64
 4a2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <write_i2c>
 4a6:	60 ee       	ldi	r22, 0xE0	; 224
 4a8:	80 e4       	ldi	r24, 0x40	; 64
 4aa:	0e 94 dd 01 	call	0x3ba	; 0x3ba <write_i2c>
 4ae:	61 ee       	ldi	r22, 0xE1	; 225
 4b0:	80 e4       	ldi	r24, 0x40	; 64
 4b2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <write_i2c>
 4b6:	60 ee       	ldi	r22, 0xE0	; 224
 4b8:	80 e4       	ldi	r24, 0x40	; 64
 4ba:	0e 94 dd 01 	call	0x3ba	; 0x3ba <write_i2c>
 4be:	63 ee       	ldi	r22, 0xE3	; 227
 4c0:	80 e4       	ldi	r24, 0x40	; 64
 4c2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <write_i2c>
 4c6:	60 ee       	ldi	r22, 0xE0	; 224
 4c8:	80 e4       	ldi	r24, 0x40	; 64
 4ca:	0e 94 dd 01 	call	0x3ba	; 0x3ba <write_i2c>
 4ce:	6f ee       	ldi	r22, 0xEF	; 239
 4d0:	80 e4       	ldi	r24, 0x40	; 64
 4d2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <write_i2c>
 4d6:	08 95       	ret

000004d8 <I2C_init>:
	//
	////////////////////////////////////////////////////////////////////////////

	///////////////// IOCON konfigurieren ///////////////////
	
	TWCR = TWCR|(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		//START
 4d8:	ec eb       	ldi	r30, 0xBC	; 188
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	84 6a       	ori	r24, 0xA4	; 164
 4e0:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 4e2:	80 81       	ld	r24, Z
 4e4:	88 23       	and	r24, r24
 4e6:	ec f7       	brge	.-6      	; 0x4e2 <I2C_init+0xa>

	TWDR = 0b01000000;									//Adr. 0100 000W + Write (W=0)
 4e8:	80 e4       	ldi	r24, 0x40	; 64
 4ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//senden
 4ee:	84 e8       	ldi	r24, 0x84	; 132
 4f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 4f4:	ec eb       	ldi	r30, 0xBC	; 188
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	88 23       	and	r24, r24
 4fc:	ec f7       	brge	.-6      	; 0x4f8 <I2C_init+0x20>

	TWDR = 0x05;										//Registeradr. IOCON schicken
 4fe:	85 e0       	ldi	r24, 0x05	; 5
 500:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//Registeradr. senden
 504:	84 e8       	ldi	r24, 0x84	; 132
 506:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 50a:	ec eb       	ldi	r30, 0xBC	; 188
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	88 23       	and	r24, r24
 512:	ec f7       	brge	.-6      	; 0x50e <I2C_init+0x36>
	
	TWDR = 0x2A;										//IOCON konfigurieren: Byte Mode, Slew Rate enable, kein Open Drain bei INTn, INTn actice-high
 514:	8a e2       	ldi	r24, 0x2A	; 42
 516:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//Konf. senden
 51a:	84 e8       	ldi	r24, 0x84	; 132
 51c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 520:	ec eb       	ldi	r30, 0xBC	; 188
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	88 23       	and	r24, r24
 528:	ec f7       	brge	.-6      	; 0x524 <I2C_init+0x4c>
	
	TWCR = TWCR|(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);		//STOP
 52a:	ec eb       	ldi	r30, 0xBC	; 188
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	84 69       	ori	r24, 0x94	; 148
 532:	80 83       	st	Z, r24
	

	///////////////// GP mit IODIR als OUTPUT konfigurieren ///////////////////
	
	TWCR = TWCR|(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		//START
 534:	80 81       	ld	r24, Z
 536:	84 6a       	ori	r24, 0xA4	; 164
 538:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 53a:	80 81       	ld	r24, Z
 53c:	88 23       	and	r24, r24
 53e:	ec f7       	brge	.-6      	; 0x53a <I2C_init+0x62>

	TWDR = 0b01000000;									//Adr. 0100 000W + Write (W=0)
 540:	80 e4       	ldi	r24, 0x40	; 64
 542:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//senden
 546:	84 e8       	ldi	r24, 0x84	; 132
 548:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 54c:	ec eb       	ldi	r30, 0xBC	; 188
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	88 23       	and	r24, r24
 554:	ec f7       	brge	.-6      	; 0x550 <I2C_init+0x78>

	TWDR = 0x00;										//Registeradr. IODIR schicken
 556:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//Registeradr. senden
 55a:	84 e8       	ldi	r24, 0x84	; 132
 55c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 560:	ec eb       	ldi	r30, 0xBC	; 188
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	80 81       	ld	r24, Z
 566:	88 23       	and	r24, r24
 568:	ec f7       	brge	.-6      	; 0x564 <I2C_init+0x8c>
	
	TWDR = 0x00;										//IODIR konfigurieren, alle Pins als OUTPUT
 56a:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//Konf. senden
 56e:	84 e8       	ldi	r24, 0x84	; 132
 570:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 574:	ec eb       	ldi	r30, 0xBC	; 188
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	88 23       	and	r24, r24
 57c:	ec f7       	brge	.-6      	; 0x578 <I2C_init+0xa0>
	
	TWCR = TWCR|(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);		//STOP
 57e:	ec eb       	ldi	r30, 0xBC	; 188
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	80 81       	ld	r24, Z
 584:	84 69       	ori	r24, 0x94	; 148
 586:	80 83       	st	Z, r24
 588:	08 95       	ret

0000058a <main>:

unsigned char bReceive = 0;

int main(void)
{	
	JTAG_DISABLE();
 58a:	85 b7       	in	r24, 0x35	; 53
 58c:	80 68       	ori	r24, 0x80	; 128
 58e:	85 bf       	out	0x35, r24	; 53
 590:	85 b7       	in	r24, 0x35	; 53
 592:	80 68       	ori	r24, 0x80	; 128
 594:	85 bf       	out	0x35, r24	; 53
    /************************************/
    /* I2C - IO - Expander				*/
    /************************************/

    DDRC |= IO_RESET;					//PC6 ist #RST vom Portexpander
 596:	3e 9a       	sbi	0x07, 6	; 7
    PORTC |= IO_RESET;					//Portexpander ein
 598:	46 9a       	sbi	0x08, 6	; 8

    TWBR = 12;							//TWBR=12, TWPS=0 im Reg. TWSR per default, damit f_SCL = 400 kHz
 59a:	8c e0       	ldi	r24, 0x0C	; 12
 59c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    
    
    roboter_init();
 5a0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <roboter_init>
	bluetooth_init();
 5a4:	0e 94 6a 00 	call	0xd4	; 0xd4 <bluetooth_init>
	I2C_init();							//I2C Initialisierung
 5a8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <I2C_init>
	LCD_init();
 5ac:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_init>
	
	
	sei();
 5b0:	78 94       	sei
	
	
	
	drive(MOTR, 0);
 5b2:	60 e0       	ldi	r22, 0x00	; 0
 5b4:	80 e4       	ldi	r24, 0x40	; 64
 5b6:	0e 94 85 00 	call	0x10a	; 0x10a <drive>
	drive(MOTL, 0);	
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	80 e8       	ldi	r24, 0x80	; 128
 5be:	0e 94 85 00 	call	0x10a	; 0x10a <drive>
	
    while (1) 
    {	
		
		bprintf(bReceive);
 5c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 5c6:	0e 94 7b 00 	call	0xf6	; 0xf6 <bprintf>
					
		if((bReceive & MASK_SELECT) == MOTR)
 5ca:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 5ce:	86 2f       	mov	r24, r22
 5d0:	80 7c       	andi	r24, 0xC0	; 192
 5d2:	80 34       	cpi	r24, 0x40	; 64
 5d4:	39 f4       	brne	.+14     	; 0x5e4 <main+0x5a>
		{
			drive(MOTR, ((bReceive & MASK_PWM) + 62));
 5d6:	6f 73       	andi	r22, 0x3F	; 63
 5d8:	62 5c       	subi	r22, 0xC2	; 194
 5da:	0e 94 85 00 	call	0x10a	; 0x10a <drive>
			bReceive = 0;
 5de:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 5e2:	ef cf       	rjmp	.-34     	; 0x5c2 <main+0x38>
		}
		else if((bReceive & MASK_SELECT) == MOTL)
 5e4:	80 38       	cpi	r24, 0x80	; 128
 5e6:	69 f7       	brne	.-38     	; 0x5c2 <main+0x38>
		{
			drive(MOTL, ((bReceive & MASK_PWM) + 62));
 5e8:	6f 73       	andi	r22, 0x3F	; 63
 5ea:	62 5c       	subi	r22, 0xC2	; 194
 5ec:	0e 94 85 00 	call	0x10a	; 0x10a <drive>
			bReceive = 0;
 5f0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 5f4:	e6 cf       	rjmp	.-52     	; 0x5c2 <main+0x38>

000005f6 <__vector_25>:
    }
}


ISR(USART1_RX_vect)
{
 5f6:	1f 92       	push	r1
 5f8:	0f 92       	push	r0
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	0f 92       	push	r0
 5fe:	11 24       	eor	r1, r1
 600:	8f 93       	push	r24
	bReceive = UDR1;
 602:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 606:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 60a:	8f 91       	pop	r24
 60c:	0f 90       	pop	r0
 60e:	0f be       	out	0x3f, r0	; 63
 610:	0f 90       	pop	r0
 612:	1f 90       	pop	r1
 614:	18 95       	reti

00000616 <__divmodhi4>:
 616:	97 fb       	bst	r25, 7
 618:	07 2e       	mov	r0, r23
 61a:	16 f4       	brtc	.+4      	; 0x620 <__divmodhi4+0xa>
 61c:	00 94       	com	r0
 61e:	07 d0       	rcall	.+14     	; 0x62e <__divmodhi4_neg1>
 620:	77 fd       	sbrc	r23, 7
 622:	09 d0       	rcall	.+18     	; 0x636 <__divmodhi4_neg2>
 624:	0e 94 1f 03 	call	0x63e	; 0x63e <__udivmodhi4>
 628:	07 fc       	sbrc	r0, 7
 62a:	05 d0       	rcall	.+10     	; 0x636 <__divmodhi4_neg2>
 62c:	3e f4       	brtc	.+14     	; 0x63c <__divmodhi4_exit>

0000062e <__divmodhi4_neg1>:
 62e:	90 95       	com	r25
 630:	81 95       	neg	r24
 632:	9f 4f       	sbci	r25, 0xFF	; 255
 634:	08 95       	ret

00000636 <__divmodhi4_neg2>:
 636:	70 95       	com	r23
 638:	61 95       	neg	r22
 63a:	7f 4f       	sbci	r23, 0xFF	; 255

0000063c <__divmodhi4_exit>:
 63c:	08 95       	ret

0000063e <__udivmodhi4>:
 63e:	aa 1b       	sub	r26, r26
 640:	bb 1b       	sub	r27, r27
 642:	51 e1       	ldi	r21, 0x11	; 17
 644:	07 c0       	rjmp	.+14     	; 0x654 <__udivmodhi4_ep>

00000646 <__udivmodhi4_loop>:
 646:	aa 1f       	adc	r26, r26
 648:	bb 1f       	adc	r27, r27
 64a:	a6 17       	cp	r26, r22
 64c:	b7 07       	cpc	r27, r23
 64e:	10 f0       	brcs	.+4      	; 0x654 <__udivmodhi4_ep>
 650:	a6 1b       	sub	r26, r22
 652:	b7 0b       	sbc	r27, r23

00000654 <__udivmodhi4_ep>:
 654:	88 1f       	adc	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	5a 95       	dec	r21
 65a:	a9 f7       	brne	.-22     	; 0x646 <__udivmodhi4_loop>
 65c:	80 95       	com	r24
 65e:	90 95       	com	r25
 660:	bc 01       	movw	r22, r24
 662:	cd 01       	movw	r24, r26
 664:	08 95       	ret

00000666 <_exit>:
 666:	f8 94       	cli

00000668 <__stop_program>:
 668:	ff cf       	rjmp	.-2      	; 0x668 <__stop_program>
