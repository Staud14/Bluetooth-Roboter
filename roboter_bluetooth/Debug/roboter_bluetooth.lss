
roboter_bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000504  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000578  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001305  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dac  00000000  00000000  000019c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c5b  00000000  00000000  00002771  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  000033cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065b  00000000  00000000  00003554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d8  00000000  00000000  00003baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004187  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_25>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a1 30       	cpi	r26, 0x01	; 1
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 3a 02 	call	0x474	; 0x474 <main>
  cc:	0c 94 80 02 	jmp	0x500	; 0x500 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <bluetooth_init>:


void bluetooth_init(void)
{		
	//Serial infterface configuration
	UCSR1C = 0b00000110;		//0b 00						00			011					0 
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
								//   Asynchronos Usart		Parity		8Bit receive		clock parity
								
	UBRR1H = (uint8_t)(UART_BAUD_RATE_CALC(UART_BAUD_RATE,F_CPU) >> 8);
  da:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)UART_BAUD_RATE_CALC(UART_BAUD_RATE,F_CPU);
  de:	87 e6       	ldi	r24, 0x67	; 103
  e0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	//Interrupt enablen
	UCSR1B |= (1 << RXCIE1);
  e4:	e9 ec       	ldi	r30, 0xC9	; 201
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	80 83       	st	Z, r24
	
	//Activate the send and receive pins
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);
  ee:	80 81       	ld	r24, Z
  f0:	88 61       	ori	r24, 0x18	; 24
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <bprintf>:
	
}

unsigned int bprintf(char trans)
{
	while( ! (UCSR1A & (1<<UDRE1)));		//warte bis UDR bereit		UDRE in UCSR1A = 0 wenn sende puffer leer
  f6:	e8 ec       	ldi	r30, 0xC8	; 200
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	90 81       	ld	r25, Z
  fc:	95 ff       	sbrs	r25, 5
  fe:	fd cf       	rjmp	.-6      	; 0xfa <bprintf+0x4>
	UDR1 = trans;
 100:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	return TRANSMITTED;
}
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	08 95       	ret

0000010a <drive>:

void drive(unsigned char select, unsigned char mot_pwm)
{

	// MOTOR RECHTS
	if (select == MOTR)					//Motor rechts
 10a:	80 34       	cpi	r24, 0x40	; 64
 10c:	19 f4       	brne	.+6      	; 0x114 <drive+0xa>
	{
		OCR4B = mot_pwm;				//rechts PWM
 10e:	60 93 d0 00 	sts	0x00D0, r22	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
 112:	08 95       	ret
	}
	
	
	// MOTOR LINKS
	if (select == MOTL)				//Motor links
 114:	80 38       	cpi	r24, 0x80	; 128
 116:	11 f4       	brne	.+4      	; 0x11c <drive+0x12>
	{
		OCR4D = mot_pwm;				//links PWM
 118:	60 93 d2 00 	sts	0x00D2, r22	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
 11c:	08 95       	ret

0000011e <adc_measure>:

unsigned int adc_measure(unsigned char channel)
{
	unsigned int result=0;

	ADMUX &= ~(1<<REFS1)&~(1<<REFS0);			//ext. AREF = 5V
 11e:	ec e7       	ldi	r30, 0x7C	; 124
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	90 81       	ld	r25, Z
 124:	9f 73       	andi	r25, 0x3F	; 63
 126:	90 83       	st	Z, r25
	ADMUX &= ~(1<<ADLAR);						//rechttsbündig
 128:	90 81       	ld	r25, Z
 12a:	9f 7d       	andi	r25, 0xDF	; 223
 12c:	90 83       	st	Z, r25

	ADCSRB &= ~(1<<MUX5);
 12e:	ab e7       	ldi	r26, 0x7B	; 123
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	9c 91       	ld	r25, X
 134:	9f 7d       	andi	r25, 0xDF	; 223
 136:	9c 93       	st	X, r25
	ADMUX &= ~(1<<MUX4)&~(1<<MUX3);
 138:	90 81       	ld	r25, Z
 13a:	97 7e       	andi	r25, 0xE7	; 231
 13c:	90 83       	st	Z, r25
	if (channel == 0) {ADMUX &= ~(1<<MUX2)&~(1<<MUX1)&~(1<<MUX0);}			//ADC0 single ended Messung Measure UB
 13e:	81 11       	cpse	r24, r1
 140:	04 c0       	rjmp	.+8      	; 0x14a <adc_measure+0x2c>
 142:	80 81       	ld	r24, Z
 144:	88 7f       	andi	r24, 0xF8	; 248
 146:	80 83       	st	Z, r24
 148:	15 c0       	rjmp	.+42     	; 0x174 <adc_measure+0x56>
	if (channel == 1) {ADMUX &= ~(1<<MUX2)&~(1<<MUX1);ADMUX |= (1<<MUX0);}	//ADC1 single ended Messung LF left  (IR Empfänger links)
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	49 f4       	brne	.+18     	; 0x160 <adc_measure+0x42>
 14e:	ec e7       	ldi	r30, 0x7C	; 124
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	89 7f       	andi	r24, 0xF9	; 249
 156:	80 83       	st	Z, r24
 158:	80 81       	ld	r24, Z
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	80 83       	st	Z, r24
 15e:	0a c0       	rjmp	.+20     	; 0x174 <adc_measure+0x56>
	if (channel == 4) {ADMUX |=  (1<<MUX2);ADMUX &= ~(1<<MUX1)&~(1<<MUX0);}	//ADC4 single ended Messung LF right (IR Empfänger rechts)
 160:	84 30       	cpi	r24, 0x04	; 4
 162:	41 f4       	brne	.+16     	; 0x174 <adc_measure+0x56>
 164:	ec e7       	ldi	r30, 0x7C	; 124
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	84 60       	ori	r24, 0x04	; 4
 16c:	80 83       	st	Z, r24
 16e:	80 81       	ld	r24, Z
 170:	8c 7f       	andi	r24, 0xFC	; 252
 172:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	//ADC einschalten, Teiler auf 128 -> 125kHz Samplingfrequenz
 174:	ea e7       	ldi	r30, 0x7A	; 122
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	87 68       	ori	r24, 0x87	; 135
 17c:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC);						//start
 17e:	80 81       	ld	r24, Z
 180:	80 64       	ori	r24, 0x40	; 64
 182:	80 83       	st	Z, r24
	while(ADCSRA&(1<<ADSC));					//warten auf Wandlungsende
 184:	80 81       	ld	r24, Z
 186:	86 fd       	sbrc	r24, 6
 188:	fd cf       	rjmp	.-6      	; 0x184 <adc_measure+0x66>
	result = ADCW;
 18a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 18e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return result;
}
 192:	08 95       	ret

00000194 <akkuzustand>:


void akkuzustand (void)
{
 194:	cf 93       	push	r28
 196:	ca e0       	ldi	r28, 0x0A	; 10
	unsigned int akku;
	unsigned char i;
	
	for (i=0;i<10;i++) {akku = adc_measure(MEASURE_UB);}
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 8f 00 	call	0x11e	; 0x11e <adc_measure>
 19e:	c1 50       	subi	r28, 0x01	; 1
 1a0:	d9 f7       	brne	.-10     	; 0x198 <akkuzustand+0x4>
	if (akku >822)										//Akku voll,	 7,2V >= Vcc > 6,8V  grün
 1a2:	87 33       	cpi	r24, 0x37	; 55
 1a4:	23 e0       	ldi	r18, 0x03	; 3
 1a6:	92 07       	cpc	r25, r18
 1a8:	10 f0       	brcs	.+4      	; 0x1ae <akkuzustand+0x1a>
	{PORTB|=(1<<LED_GRUEN); PORTB&=~(1<<LED_ROT);}
 1aa:	2c 9a       	sbi	0x05, 4	; 5
 1ac:	2d 98       	cbi	0x05, 5	; 5
	if ((akku<=822)&&(akku>744))						//Akku halbvoll, 6,8V >= Vcc > 6,4V  gelb
 1ae:	9c 01       	movw	r18, r24
 1b0:	29 5e       	subi	r18, 0xE9	; 233
 1b2:	32 40       	sbci	r19, 0x02	; 2
 1b4:	2e 34       	cpi	r18, 0x4E	; 78
 1b6:	31 05       	cpc	r19, r1
 1b8:	10 f4       	brcc	.+4      	; 0x1be <akkuzustand+0x2a>
	{PORTB|=(1<<LED_GRUEN); PORTB|=(1<<LED_ROT);}
 1ba:	2c 9a       	sbi	0x05, 4	; 5
 1bc:	2d 9a       	sbi	0x05, 5	; 5
	if (akku<=744)										//Akku leer,	 6,4V >= Vcc		 rot +  ENDE
 1be:	89 3e       	cpi	r24, 0xE9	; 233
 1c0:	92 40       	sbci	r25, 0x02	; 2
 1c2:	d8 f4       	brcc	.+54     	; 0x1fa <akkuzustand+0x66>
	{PORTB&=~(1<<LED_GRUEN); PORTB|=(1<<LED_ROT);
 1c4:	2c 98       	cbi	0x05, 4	; 5
 1c6:	2d 9a       	sbi	0x05, 5	; 5
		cli();										//alle Interrupts aus
 1c8:	f8 94       	cli
		TCCR4B &= 0xF0;							//alle Motoren stopp, Motor PWM aus
 1ca:	e1 ec       	ldi	r30, 0xC1	; 193
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	80 7f       	andi	r24, 0xF0	; 240
 1d2:	80 83       	st	Z, r24
		PORTB  &= 0x30;							//alle LEDs am Ring aus, Beeper und Motor right aus
 1d4:	85 b1       	in	r24, 0x05	; 5
 1d6:	80 73       	andi	r24, 0x30	; 48
 1d8:	85 b9       	out	0x05, r24	; 5
		PORTD  =  0x08;							//Motor left und alle IR-Sender aus
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	8b b9       	out	0x0b, r24	; 11
		while(1)
		{
			PORTB^=(1<<LED_ROT);				//rote Duo LED blinkt in Endlsschleife = E N D E !!!!
 1de:	90 e2       	ldi	r25, 0x20	; 32
 1e0:	85 b1       	in	r24, 0x05	; 5
 1e2:	89 27       	eor	r24, r25
 1e4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	22 e5       	ldi	r18, 0x52	; 82
 1ea:	37 e0       	ldi	r19, 0x07	; 7
 1ec:	81 50       	subi	r24, 0x01	; 1
 1ee:	20 40       	sbci	r18, 0x00	; 0
 1f0:	30 40       	sbci	r19, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <akkuzustand+0x58>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <akkuzustand+0x62>
 1f6:	00 00       	nop
 1f8:	f3 cf       	rjmp	.-26     	; 0x1e0 <akkuzustand+0x4c>
			_delay_ms(150);
		}
	}
}
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <roboter_init>:


void roboter_init(void)
{	
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
	CLKPR = 0x80;
 202:	e1 e6       	ldi	r30, 0x61	; 97
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	80 83       	st	Z, r24
	CLKPR = 0x00;						//CLK_IO = f_quarz = 16 MHz, Teiler 1
 20a:	10 82       	st	Z, r1
	

	//LED Pins
	DDRB = DDRB |(1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB3);	//LED Pins
 20c:	84 b1       	in	r24, 0x04	; 4
 20e:	8f 60       	ori	r24, 0x0F	; 15
 210:	84 b9       	out	0x04, r24	; 4
	//DDRD = DDRD |(1<<DDD2)|(1<<DDD3);						//Duo LED Pins		//Disabled for Bluetooth


	//Akkuspannung
	DDRF = DDRF &~(1<<MEASURE_UB);		//ADC0	PF0
 212:	80 98       	cbi	0x10, 0	; 16

	//Motoren Pins
	DDRB = DDRB | (1<<DDB6);			//PWM-Output OC4B für MOTOR_RECHTS
 214:	26 9a       	sbi	0x04, 6	; 4
	DDRD = DDRD | (1<<DDD7);			//PWM-Output OC4D für MOTOR_LINKS
 216:	57 9a       	sbi	0x0a, 7	; 10

	//Timer 4 im Fast PWM Mode konfigurieren
	TCCR4A = TCCR4A | (1<<PWM4B);
 218:	a0 ec       	ldi	r26, 0xC0	; 192
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	8c 91       	ld	r24, X
 21e:	81 60       	ori	r24, 0x01	; 1
 220:	8c 93       	st	X, r24
	TCCR4C = TCCR4C | (1<<PWM4D);
 222:	e2 ec       	ldi	r30, 0xC2	; 194
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	81 60       	ori	r24, 0x01	; 1
 22a:	80 83       	st	Z, r24
	TCCR4D = TCCR4D &~(1<<WGM41);
 22c:	c3 ec       	ldi	r28, 0xC3	; 195
 22e:	d0 e0       	ldi	r29, 0x00	; 0
 230:	88 81       	ld	r24, Y
 232:	8d 7f       	andi	r24, 0xFD	; 253
 234:	88 83       	st	Y, r24
	TCCR4D = TCCR4D &~(1<<WGM40);		//Fast PWM am OC4B und OC4D
 236:	88 81       	ld	r24, Y
 238:	8e 7f       	andi	r24, 0xFE	; 254
 23a:	88 83       	st	Y, r24

	TCCR4A = TCCR4A &~(1<<COM4B0);
 23c:	8c 91       	ld	r24, X
 23e:	8f 7e       	andi	r24, 0xEF	; 239
 240:	8c 93       	st	X, r24
	TCCR4A = TCCR4A | (1<<COM4B1);		//COM4B1:0=2
 242:	8c 91       	ld	r24, X
 244:	80 62       	ori	r24, 0x20	; 32
 246:	8c 93       	st	X, r24

	TCCR4C = TCCR4C &~(1<<COM4D0);
 248:	80 81       	ld	r24, Z
 24a:	8b 7f       	andi	r24, 0xFB	; 251
 24c:	80 83       	st	Z, r24
	TCCR4C = TCCR4C | (1<<COM4D1);		//COM4D1:0=2
 24e:	80 81       	ld	r24, Z
 250:	88 60       	ori	r24, 0x08	; 8
 252:	80 83       	st	Z, r24

	TC4H = 0x03;
 254:	ef eb       	ldi	r30, 0xBF	; 191
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	80 83       	st	Z, r24
	OCR4C = 0xE8;						//f_PWM = f_CLK_T4/(1+OCR4C) = 62,5kHz/1000 = 62,5 Hz
 25c:	88 ee       	ldi	r24, 0xE8	; 232
 25e:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>
	TC4H = 0x00;
 262:	10 82       	st	Z, r1
	OCR4B = 94;							//Tastverhältnis am OC4B-Pin (PB6), PWM_rechts (retour_max = 62, vor_max = 125, stopp = 94)
 264:	8e e5       	ldi	r24, 0x5E	; 94
 266:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
	OCR4D = 94;							//Tastverhältnis am OC4D-Pin (PD7), PWM_links  (retour_max = 62, vor_max = 125, stopp = 94)
 26a:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>


	TCCR4B = TCCR4B | (1<<CS43);
 26e:	e1 ec       	ldi	r30, 0xC1	; 193
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	88 60       	ori	r24, 0x08	; 8
 276:	80 83       	st	Z, r24
	TCCR4B = TCCR4B &~(1<<CS42);
 278:	80 81       	ld	r24, Z
 27a:	8b 7f       	andi	r24, 0xFB	; 251
 27c:	80 83       	st	Z, r24
	TCCR4B = TCCR4B &~(1<<CS41);		//f_CLK_T4 = CLK_IO/Prescaler = 16MHz/256 = 62,5kHz
 27e:	80 81       	ld	r24, Z
 280:	8d 7f       	andi	r24, 0xFD	; 253
 282:	80 83       	st	Z, r24
	TCCR4B = TCCR4B | (1<<CS40);		//Timer4 Prescaler = 1, Start PWM
 284:	80 81       	ld	r24, Z
 286:	81 60       	ori	r24, 0x01	; 1
 288:	80 83       	st	Z, r24
	TCNT0 = PRELOAD_TIMER0;
	TIMSK0 |= (1 << TOIE0);
#endif

	
	akkuzustand();						//ein paar mal messen damit ADC warm läuft
 28a:	0e 94 ca 00 	call	0x194	; 0x194 <akkuzustand>
	akkuzustand();
 28e:	0e 94 ca 00 	call	0x194	; 0x194 <akkuzustand>
	akkuzustand();
 292:	0e 94 ca 00 	call	0x194	; 0x194 <akkuzustand>
	akkuzustand();
 296:	0e 94 ca 00 	call	0x194	; 0x194 <akkuzustand>
	akkuzustand();
 29a:	0e 94 ca 00 	call	0x194	; 0x194 <akkuzustand>
}
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <write_i2c>:

void LCD_string(char *data)
{
	while (*data != '\0')				//bis zum letzten Zeichen
	{LCD_data(*data++);}
}
 2a4:	ef e3       	ldi	r30, 0x3F	; 63
 2a6:	ff e1       	ldi	r31, 0x1F	; 31
 2a8:	31 97       	sbiw	r30, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <write_i2c+0x4>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <write_i2c+0xa>
 2ae:	00 00       	nop
 2b0:	ec eb       	ldi	r30, 0xBC	; 188
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	90 81       	ld	r25, Z
 2b6:	94 6a       	ori	r25, 0xA4	; 164
 2b8:	90 83       	st	Z, r25
 2ba:	90 81       	ld	r25, Z
 2bc:	99 23       	and	r25, r25
 2be:	ec f7       	brge	.-6      	; 0x2ba <write_i2c+0x16>
 2c0:	8e 7f       	andi	r24, 0xFE	; 254
 2c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 2c6:	84 e8       	ldi	r24, 0x84	; 132
 2c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2cc:	ec eb       	ldi	r30, 0xBC	; 188
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	88 23       	and	r24, r24
 2d4:	ec f7       	brge	.-6      	; 0x2d0 <write_i2c+0x2c>
 2d6:	8a e0       	ldi	r24, 0x0A	; 10
 2d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 2dc:	84 e8       	ldi	r24, 0x84	; 132
 2de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2e2:	ec eb       	ldi	r30, 0xBC	; 188
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	88 23       	and	r24, r24
 2ea:	ec f7       	brge	.-6      	; 0x2e6 <write_i2c+0x42>
 2ec:	86 2f       	mov	r24, r22
 2ee:	80 62       	ori	r24, 0x20	; 32
 2f0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 2f4:	84 e8       	ldi	r24, 0x84	; 132
 2f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2fa:	ec eb       	ldi	r30, 0xBC	; 188
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	88 23       	and	r24, r24
 302:	ec f7       	brge	.-6      	; 0x2fe <write_i2c+0x5a>
 304:	6f 7d       	andi	r22, 0xDF	; 223
 306:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 30a:	84 e8       	ldi	r24, 0x84	; 132
 30c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 310:	ec eb       	ldi	r30, 0xBC	; 188
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	88 23       	and	r24, r24
 318:	ec f7       	brge	.-6      	; 0x314 <write_i2c+0x70>
 31a:	ec eb       	ldi	r30, 0xBC	; 188
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	84 69       	ori	r24, 0x94	; 148
 322:	80 83       	st	Z, r24
 324:	08 95       	ret

00000326 <LCD_init>:
 326:	2f ef       	ldi	r18, 0xFF	; 255
 328:	80 e7       	ldi	r24, 0x70	; 112
 32a:	92 e0       	ldi	r25, 0x02	; 2
 32c:	21 50       	subi	r18, 0x01	; 1
 32e:	80 40       	sbci	r24, 0x00	; 0
 330:	90 40       	sbci	r25, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <LCD_init+0x6>
 334:	00 c0       	rjmp	.+0      	; 0x336 <LCD_init+0x10>
 336:	00 00       	nop
 338:	63 ee       	ldi	r22, 0xE3	; 227
 33a:	80 e4       	ldi	r24, 0x40	; 64
 33c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <write_i2c>
 340:	8f e3       	ldi	r24, 0x3F	; 63
 342:	9c e9       	ldi	r25, 0x9C	; 156
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <LCD_init+0x1e>
 348:	00 c0       	rjmp	.+0      	; 0x34a <LCD_init+0x24>
 34a:	00 00       	nop
 34c:	63 ee       	ldi	r22, 0xE3	; 227
 34e:	80 e4       	ldi	r24, 0x40	; 64
 350:	0e 94 52 01 	call	0x2a4	; 0x2a4 <write_i2c>
 354:	8f e1       	ldi	r24, 0x1F	; 31
 356:	93 e0       	ldi	r25, 0x03	; 3
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <LCD_init+0x32>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <LCD_init+0x38>
 35e:	00 00       	nop
 360:	63 ee       	ldi	r22, 0xE3	; 227
 362:	80 e4       	ldi	r24, 0x40	; 64
 364:	0e 94 52 01 	call	0x2a4	; 0x2a4 <write_i2c>
 368:	62 ee       	ldi	r22, 0xE2	; 226
 36a:	80 e4       	ldi	r24, 0x40	; 64
 36c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <write_i2c>
 370:	62 ee       	ldi	r22, 0xE2	; 226
 372:	80 e4       	ldi	r24, 0x40	; 64
 374:	0e 94 52 01 	call	0x2a4	; 0x2a4 <write_i2c>
 378:	68 ee       	ldi	r22, 0xE8	; 232
 37a:	80 e4       	ldi	r24, 0x40	; 64
 37c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <write_i2c>
 380:	60 ee       	ldi	r22, 0xE0	; 224
 382:	80 e4       	ldi	r24, 0x40	; 64
 384:	0e 94 52 01 	call	0x2a4	; 0x2a4 <write_i2c>
 388:	68 ee       	ldi	r22, 0xE8	; 232
 38a:	80 e4       	ldi	r24, 0x40	; 64
 38c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <write_i2c>
 390:	60 ee       	ldi	r22, 0xE0	; 224
 392:	80 e4       	ldi	r24, 0x40	; 64
 394:	0e 94 52 01 	call	0x2a4	; 0x2a4 <write_i2c>
 398:	61 ee       	ldi	r22, 0xE1	; 225
 39a:	80 e4       	ldi	r24, 0x40	; 64
 39c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <write_i2c>
 3a0:	60 ee       	ldi	r22, 0xE0	; 224
 3a2:	80 e4       	ldi	r24, 0x40	; 64
 3a4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <write_i2c>
 3a8:	63 ee       	ldi	r22, 0xE3	; 227
 3aa:	80 e4       	ldi	r24, 0x40	; 64
 3ac:	0e 94 52 01 	call	0x2a4	; 0x2a4 <write_i2c>
 3b0:	60 ee       	ldi	r22, 0xE0	; 224
 3b2:	80 e4       	ldi	r24, 0x40	; 64
 3b4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <write_i2c>
 3b8:	6f ee       	ldi	r22, 0xEF	; 239
 3ba:	80 e4       	ldi	r24, 0x40	; 64
 3bc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <write_i2c>
 3c0:	08 95       	ret

000003c2 <I2C_init>:
	//
	////////////////////////////////////////////////////////////////////////////

	///////////////// IOCON konfigurieren ///////////////////
	
	TWCR = TWCR|(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		//START
 3c2:	ec eb       	ldi	r30, 0xBC	; 188
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	84 6a       	ori	r24, 0xA4	; 164
 3ca:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 3cc:	80 81       	ld	r24, Z
 3ce:	88 23       	and	r24, r24
 3d0:	ec f7       	brge	.-6      	; 0x3cc <I2C_init+0xa>

	TWDR = 0b01000000;									//Adr. 0100 000W + Write (W=0)
 3d2:	80 e4       	ldi	r24, 0x40	; 64
 3d4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//senden
 3d8:	84 e8       	ldi	r24, 0x84	; 132
 3da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 3de:	ec eb       	ldi	r30, 0xBC	; 188
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	88 23       	and	r24, r24
 3e6:	ec f7       	brge	.-6      	; 0x3e2 <I2C_init+0x20>

	TWDR = 0x05;										//Registeradr. IOCON schicken
 3e8:	85 e0       	ldi	r24, 0x05	; 5
 3ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//Registeradr. senden
 3ee:	84 e8       	ldi	r24, 0x84	; 132
 3f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 3f4:	ec eb       	ldi	r30, 0xBC	; 188
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	88 23       	and	r24, r24
 3fc:	ec f7       	brge	.-6      	; 0x3f8 <I2C_init+0x36>
	
	TWDR = 0x2A;										//IOCON konfigurieren: Byte Mode, Slew Rate enable, kein Open Drain bei INTn, INTn actice-high
 3fe:	8a e2       	ldi	r24, 0x2A	; 42
 400:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//Konf. senden
 404:	84 e8       	ldi	r24, 0x84	; 132
 406:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 40a:	ec eb       	ldi	r30, 0xBC	; 188
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	88 23       	and	r24, r24
 412:	ec f7       	brge	.-6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	
	TWCR = TWCR|(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);		//STOP
 414:	ec eb       	ldi	r30, 0xBC	; 188
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	84 69       	ori	r24, 0x94	; 148
 41c:	80 83       	st	Z, r24
	

	///////////////// GP mit IODIR als OUTPUT konfigurieren ///////////////////
	
	TWCR = TWCR|(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		//START
 41e:	80 81       	ld	r24, Z
 420:	84 6a       	ori	r24, 0xA4	; 164
 422:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 424:	80 81       	ld	r24, Z
 426:	88 23       	and	r24, r24
 428:	ec f7       	brge	.-6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>

	TWDR = 0b01000000;									//Adr. 0100 000W + Write (W=0)
 42a:	80 e4       	ldi	r24, 0x40	; 64
 42c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//senden
 430:	84 e8       	ldi	r24, 0x84	; 132
 432:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 436:	ec eb       	ldi	r30, 0xBC	; 188
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	88 23       	and	r24, r24
 43e:	ec f7       	brge	.-6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>

	TWDR = 0x00;										//Registeradr. IODIR schicken
 440:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//Registeradr. senden
 444:	84 e8       	ldi	r24, 0x84	; 132
 446:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 44a:	ec eb       	ldi	r30, 0xBC	; 188
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	88 23       	and	r24, r24
 452:	ec f7       	brge	.-6      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
	
	TWDR = 0x00;										//IODIR konfigurieren, alle Pins als OUTPUT
 454:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//Konf. senden
 458:	84 e8       	ldi	r24, 0x84	; 132
 45a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 45e:	ec eb       	ldi	r30, 0xBC	; 188
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	88 23       	and	r24, r24
 466:	ec f7       	brge	.-6      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
	
	TWCR = TWCR|(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);		//STOP
 468:	ec eb       	ldi	r30, 0xBC	; 188
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	84 69       	ori	r24, 0x94	; 148
 470:	80 83       	st	Z, r24
 472:	08 95       	ret

00000474 <main>:

unsigned char bReceive = 0;

int main(void)
{	
	JTAG_DISABLE();
 474:	85 b7       	in	r24, 0x35	; 53
 476:	80 68       	ori	r24, 0x80	; 128
 478:	85 bf       	out	0x35, r24	; 53
 47a:	85 b7       	in	r24, 0x35	; 53
 47c:	80 68       	ori	r24, 0x80	; 128
 47e:	85 bf       	out	0x35, r24	; 53
    /************************************/
    /* I2C - IO - Expander				*/
    /************************************/

    DDRC |= IO_RESET;					//PC6 ist #RST vom Portexpander
 480:	3e 9a       	sbi	0x07, 6	; 7
    PORTC |= IO_RESET;					//Portexpander ein
 482:	46 9a       	sbi	0x08, 6	; 8

    TWBR = 12;							//TWBR=12, TWPS=0 im Reg. TWSR per default, damit f_SCL = 400 kHz
 484:	8c e0       	ldi	r24, 0x0C	; 12
 486:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    
    
    roboter_init();
 48a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <roboter_init>
	bluetooth_init();
 48e:	0e 94 6a 00 	call	0xd4	; 0xd4 <bluetooth_init>
	I2C_init();							//I2C Initialisierung
 492:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <I2C_init>
	LCD_init();
 496:	0e 94 93 01 	call	0x326	; 0x326 <LCD_init>
	
	
	sei();
 49a:	78 94       	sei
	
	
	
	drive(MOTR, 0);
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	80 e4       	ldi	r24, 0x40	; 64
 4a0:	0e 94 85 00 	call	0x10a	; 0x10a <drive>
	drive(MOTL, 0);	
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	80 e8       	ldi	r24, 0x80	; 128
 4a8:	0e 94 85 00 	call	0x10a	; 0x10a <drive>
	
    while (1) 
    {	
		
		bprintf(bReceive);
 4ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 4b0:	0e 94 7b 00 	call	0xf6	; 0xf6 <bprintf>
					
		if((bReceive & MASK_SELECT) == MOTR)
 4b4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 4b8:	86 2f       	mov	r24, r22
 4ba:	80 7c       	andi	r24, 0xC0	; 192
 4bc:	80 34       	cpi	r24, 0x40	; 64
 4be:	39 f4       	brne	.+14     	; 0x4ce <main+0x5a>
		{
			drive(MOTR, ((bReceive & MASK_PWM) + 62));
 4c0:	6f 73       	andi	r22, 0x3F	; 63
 4c2:	62 5c       	subi	r22, 0xC2	; 194
 4c4:	0e 94 85 00 	call	0x10a	; 0x10a <drive>
			bReceive = 0;
 4c8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 4cc:	ef cf       	rjmp	.-34     	; 0x4ac <main+0x38>
		}
		else if((bReceive & MASK_SELECT) == MOTL)
 4ce:	80 38       	cpi	r24, 0x80	; 128
 4d0:	69 f7       	brne	.-38     	; 0x4ac <main+0x38>
		{
			drive(MOTL, ((bReceive & MASK_PWM) + 62));
 4d2:	6f 73       	andi	r22, 0x3F	; 63
 4d4:	62 5c       	subi	r22, 0xC2	; 194
 4d6:	0e 94 85 00 	call	0x10a	; 0x10a <drive>
			bReceive = 0;
 4da:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 4de:	e6 cf       	rjmp	.-52     	; 0x4ac <main+0x38>

000004e0 <__vector_25>:
    }
}


ISR(USART1_RX_vect)
{
 4e0:	1f 92       	push	r1
 4e2:	0f 92       	push	r0
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	0f 92       	push	r0
 4e8:	11 24       	eor	r1, r1
 4ea:	8f 93       	push	r24
	bReceive = UDR1;
 4ec:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 4f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 4f4:	8f 91       	pop	r24
 4f6:	0f 90       	pop	r0
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	0f 90       	pop	r0
 4fc:	1f 90       	pop	r1
 4fe:	18 95       	reti

00000500 <_exit>:
 500:	f8 94       	cli

00000502 <__stop_program>:
 502:	ff cf       	rjmp	.-2      	; 0x502 <__stop_program>
