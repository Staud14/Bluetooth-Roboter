
roboter_bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000706  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000692  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000706  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000706  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000738  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001264  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cfd  00000000  00000000  00001acc  2**0
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
  8 .debug_line   00000d4b  00000000  00000000  000029db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00003728  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000656  00000000  00000000  000038b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000065a  00000000  00000000  00003f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004560  2**0
=======
  8 .debug_line   00000ca5  00000000  00000000  000027c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00003470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000647  00000000  00000000  00003654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000058b  00000000  00000000  00003c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004226  2**0
>>>>>>> 7b96c613b3198b9bd1a917b81cdcb6d159acd76e
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 af 01 	jmp	0x35e	; 0x35e <__vector_23>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 1d 03 	jmp	0x63a	; 0x63a <__vector_25>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a5 30       	cpi	r26, 0x05	; 5
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <main>
  cc:	0c 94 47 03 	jmp	0x68e	; 0x68e <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <bluetooth_init>:


void bluetooth_init(void)
{		
	//Serial infterface configuration
	UCSR1C = 0b00000110;		//0b 00						00			011					0 
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
								//   Asynchronos Usart		Parity		8Bit receive		clock parity
								
	UBRR1H = (uint8_t)(UART_BAUD_RATE_CALC(UART_BAUD_RATE,F_CPU) >> 8);
  da:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)UART_BAUD_RATE_CALC(UART_BAUD_RATE,F_CPU);
  de:	87 e6       	ldi	r24, 0x67	; 103
  e0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	//Interrupt enablen
	UCSR1B |= (1 << RXCIE1);
  e4:	e9 ec       	ldi	r30, 0xC9	; 201
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	80 83       	st	Z, r24
	
	//Activate the send and receive pins
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);
  ee:	80 81       	ld	r24, Z
  f0:	88 61       	ori	r24, 0x18	; 24
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <bprintf>:
	
}

unsigned int bprintf(char trans)
{
	while( ! (UCSR1A & (1<<UDRE1)));		//warte bis UDR bereit		UDRE in UCSR1A = 0 wenn sende puffer leer
  f6:	e8 ec       	ldi	r30, 0xC8	; 200
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	90 81       	ld	r25, Z
  fc:	95 ff       	sbrs	r25, 5
  fe:	fd cf       	rjmp	.-6      	; 0xfa <bprintf+0x4>
	UDR1 = trans;
 100:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	return TRANSMITTED;
}
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	08 95       	ret

0000010a <drive>:

void drive(unsigned char dir_motr, unsigned char pwm_rechts, unsigned char dir_motl, unsigned char pwm_links)
{

	// MOTOR RECHTS
	if (dir_motr == 2)				//Motor rechts Stopp
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	19 f4       	brne	.+6      	; 0x114 <drive+0xa>
	{
		OCR4B = 0;					//rechts PWM=0
 10e:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
 112:	17 c0       	rjmp	.+46     	; 0x142 <drive+0x38>
	}
	else if (dir_motr == 1)			//rechts mit PWM vorwärts
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	59 f4       	brne	.+22     	; 0x12e <drive+0x24>
	{
		if ((pwm_rechts>=PWM_R_STOPP)&&(pwm_rechts<PWM_R_VOR_MAX+1)) {OCR4B = pwm_rechts;}
 118:	82 ea       	ldi	r24, 0xA2	; 162
 11a:	86 0f       	add	r24, r22
 11c:	80 32       	cpi	r24, 0x20	; 32
 11e:	18 f4       	brcc	.+6      	; 0x126 <drive+0x1c>
 120:	60 93 d0 00 	sts	0x00D0, r22	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
 124:	0e c0       	rjmp	.+28     	; 0x142 <drive+0x38>
		else {OCR4B = PWM_R_VOR_MAX;}			//vollgas rechts vor
 126:	8d e7       	ldi	r24, 0x7D	; 125
 128:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
 12c:	0a c0       	rjmp	.+20     	; 0x142 <drive+0x38>
	}
	else
	{
		if ((pwm_rechts<=PWM_R_STOPP)&&(pwm_rechts>PWM_R_RET_MAX-1)) {OCR4B = pwm_rechts;}			//rechts mit PWM retour
 12e:	82 ec       	ldi	r24, 0xC2	; 194
 130:	86 0f       	add	r24, r22
 132:	81 32       	cpi	r24, 0x21	; 33
 134:	18 f4       	brcc	.+6      	; 0x13c <drive+0x32>
 136:	60 93 d0 00 	sts	0x00D0, r22	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
 13a:	03 c0       	rjmp	.+6      	; 0x142 <drive+0x38>
		else {OCR4B = PWM_R_RET_MAX;}			//vollgas rechts retour
 13c:	8e e3       	ldi	r24, 0x3E	; 62
 13e:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
	}

	// MOTOR LINKS
	if (dir_motl == 2)				//Motor links Stopp
 142:	42 30       	cpi	r20, 0x02	; 2
 144:	19 f4       	brne	.+6      	; 0x14c <drive+0x42>
	{
		OCR4D = 0;					//links PWM=0
 146:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
 14a:	08 95       	ret
	}
	else if (dir_motl == 1)			//links mit PWM vorwärts
 14c:	41 30       	cpi	r20, 0x01	; 1
 14e:	59 f4       	brne	.+22     	; 0x166 <drive+0x5c>
	{
		if ((pwm_links>PWM_L_VOR_MAX-1)&&(pwm_links<=PWM_L_STOPP)) {OCR4D = pwm_links;}
 150:	82 ec       	ldi	r24, 0xC2	; 194
 152:	82 0f       	add	r24, r18
 154:	81 32       	cpi	r24, 0x21	; 33
 156:	18 f4       	brcc	.+6      	; 0x15e <drive+0x54>
 158:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
 15c:	08 95       	ret
		else {OCR4D = PWM_L_VOR_MAX;}		//vollgas links  vor
 15e:	8e e3       	ldi	r24, 0x3E	; 62
 160:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
 164:	08 95       	ret
	}
	else
	{
		if ((pwm_links>=PWM_L_STOPP)&&(pwm_links<PWM_L_RET_MAX+1)) {OCR4D = pwm_links;}	//links mit PWM retour
 166:	82 ea       	ldi	r24, 0xA2	; 162
 168:	82 0f       	add	r24, r18
 16a:	80 32       	cpi	r24, 0x20	; 32
 16c:	18 f4       	brcc	.+6      	; 0x174 <drive+0x6a>
 16e:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
 172:	08 95       	ret
		else {OCR4D = PWM_L_RET_MAX;}		//vollgas links retour
 174:	8d e7       	ldi	r24, 0x7D	; 125
 176:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
 17a:	08 95       	ret

0000017c <adc_measure>:

unsigned int adc_measure(unsigned char channel)
{
	unsigned int result=0;

	ADMUX &= ~(1<<REFS1)&~(1<<REFS0);			//ext. AREF = 5V
 17c:	ec e7       	ldi	r30, 0x7C	; 124
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	90 81       	ld	r25, Z
 182:	9f 73       	andi	r25, 0x3F	; 63
 184:	90 83       	st	Z, r25
	ADMUX &= ~(1<<ADLAR);						//rechttsbündig
 186:	90 81       	ld	r25, Z
 188:	9f 7d       	andi	r25, 0xDF	; 223
 18a:	90 83       	st	Z, r25

	ADCSRB &= ~(1<<MUX5);
 18c:	ab e7       	ldi	r26, 0x7B	; 123
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	9c 91       	ld	r25, X
 192:	9f 7d       	andi	r25, 0xDF	; 223
 194:	9c 93       	st	X, r25
	ADMUX &= ~(1<<MUX4)&~(1<<MUX3);
 196:	90 81       	ld	r25, Z
 198:	97 7e       	andi	r25, 0xE7	; 231
 19a:	90 83       	st	Z, r25
	if (channel == 0) {ADMUX &= ~(1<<MUX2)&~(1<<MUX1)&~(1<<MUX0);}			//ADC0 single ended Messung Measure UB
 19c:	81 11       	cpse	r24, r1
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <adc_measure+0x2c>
 1a0:	80 81       	ld	r24, Z
 1a2:	88 7f       	andi	r24, 0xF8	; 248
 1a4:	80 83       	st	Z, r24
 1a6:	15 c0       	rjmp	.+42     	; 0x1d2 <adc_measure+0x56>
	if (channel == 1) {ADMUX &= ~(1<<MUX2)&~(1<<MUX1);ADMUX |= (1<<MUX0);}	//ADC1 single ended Messung LF left  (IR Empfänger links)
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	49 f4       	brne	.+18     	; 0x1be <adc_measure+0x42>
 1ac:	ec e7       	ldi	r30, 0x7C	; 124
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	89 7f       	andi	r24, 0xF9	; 249
 1b4:	80 83       	st	Z, r24
 1b6:	80 81       	ld	r24, Z
 1b8:	81 60       	ori	r24, 0x01	; 1
 1ba:	80 83       	st	Z, r24
 1bc:	0a c0       	rjmp	.+20     	; 0x1d2 <adc_measure+0x56>
	if (channel == 4) {ADMUX |=  (1<<MUX2);ADMUX &= ~(1<<MUX1)&~(1<<MUX0);}	//ADC4 single ended Messung LF right (IR Empfänger rechts)
 1be:	84 30       	cpi	r24, 0x04	; 4
 1c0:	41 f4       	brne	.+16     	; 0x1d2 <adc_measure+0x56>
 1c2:	ec e7       	ldi	r30, 0x7C	; 124
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	84 60       	ori	r24, 0x04	; 4
 1ca:	80 83       	st	Z, r24
 1cc:	80 81       	ld	r24, Z
 1ce:	8c 7f       	andi	r24, 0xFC	; 252
 1d0:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	//ADC einschalten, Teiler auf 128 -> 125kHz Samplingfrequenz
 1d2:	ea e7       	ldi	r30, 0x7A	; 122
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	87 68       	ori	r24, 0x87	; 135
 1da:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC);						//start
 1dc:	80 81       	ld	r24, Z
 1de:	80 64       	ori	r24, 0x40	; 64
 1e0:	80 83       	st	Z, r24
	while(ADCSRA&(1<<ADSC));					//warten auf Wandlungsende
 1e2:	80 81       	ld	r24, Z
 1e4:	86 fd       	sbrc	r24, 6
 1e6:	fd cf       	rjmp	.-6      	; 0x1e2 <adc_measure+0x66>
	result = ADCW;
 1e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1ec:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return result;
}
 1f0:	08 95       	ret

<<<<<<< HEAD
000001f2 <akkuzustand>:
=======
000001f2 <_delay_ms>:
	akkuzustand();
	akkuzustand();
}

void _delay_ms(long int _ms)
{
 1f2:	9b 01       	movw	r18, r22
 1f4:	ac 01       	movw	r20, r24
	while(counter_timer != (_ms*1000));
 1f6:	a8 ee       	ldi	r26, 0xE8	; 232
 1f8:	b3 e0       	ldi	r27, 0x03	; 3
 1fa:	0e 94 2d 03 	call	0x65a	; 0x65a <__muluhisi3>
 1fe:	ab 01       	movw	r20, r22
 200:	bc 01       	movw	r22, r24
 202:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 206:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 20a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 20e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 212:	48 17       	cp	r20, r24
 214:	59 07       	cpc	r21, r25
 216:	6a 07       	cpc	r22, r26
 218:	7b 07       	cpc	r23, r27
 21a:	d9 f7       	brne	.-10     	; 0x212 <_delay_ms+0x20>
}
 21c:	08 95       	ret

0000021e <akkuzustand>:
	return result;
}
>>>>>>> 7b96c613b3198b9bd1a917b81cdcb6d159acd76e


void akkuzustand (void)
{
<<<<<<< HEAD
 1f2:	cf 93       	push	r28
 1f4:	ca e0       	ldi	r28, 0x0A	; 10
=======
 21e:	cf 93       	push	r28
 220:	ca e0       	ldi	r28, 0x0A	; 10
>>>>>>> 7b96c613b3198b9bd1a917b81cdcb6d159acd76e
	unsigned int akku;
	unsigned char i;
	
	for (i=0;i<10;i++) {akku = adc_measure(MEASURE_UB);}
<<<<<<< HEAD
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 be 00 	call	0x17c	; 0x17c <adc_measure>
 1fc:	c1 50       	subi	r28, 0x01	; 1
 1fe:	d9 f7       	brne	.-10     	; 0x1f6 <akkuzustand+0x4>
	if (akku >822)										//Akku voll,	 7,2V >= Vcc > 6,8V  grün
 200:	87 33       	cpi	r24, 0x37	; 55
 202:	23 e0       	ldi	r18, 0x03	; 3
 204:	92 07       	cpc	r25, r18
 206:	10 f0       	brcs	.+4      	; 0x20c <akkuzustand+0x1a>
	{PORTB|=(1<<LED_GRUEN); PORTB&=~(1<<LED_ROT);}
 208:	2c 9a       	sbi	0x05, 4	; 5
 20a:	2d 98       	cbi	0x05, 5	; 5
	if ((akku<=822)&&(akku>744))						//Akku halbvoll, 6,8V >= Vcc > 6,4V  gelb
 20c:	9c 01       	movw	r18, r24
 20e:	29 5e       	subi	r18, 0xE9	; 233
 210:	32 40       	sbci	r19, 0x02	; 2
 212:	2e 34       	cpi	r18, 0x4E	; 78
 214:	31 05       	cpc	r19, r1
 216:	10 f4       	brcc	.+4      	; 0x21c <akkuzustand+0x2a>
	{PORTB|=(1<<LED_GRUEN); PORTB|=(1<<LED_ROT);}
 218:	2c 9a       	sbi	0x05, 4	; 5
 21a:	2d 9a       	sbi	0x05, 5	; 5
	if (akku<=744)										//Akku leer,	 6,4V >= Vcc		 rot +  ENDE
 21c:	89 3e       	cpi	r24, 0xE9	; 233
 21e:	92 40       	sbci	r25, 0x02	; 2
 220:	d8 f4       	brcc	.+54     	; 0x258 <akkuzustand+0x66>
	{PORTB&=~(1<<LED_GRUEN); PORTB|=(1<<LED_ROT);
 222:	2c 98       	cbi	0x05, 4	; 5
 224:	2d 9a       	sbi	0x05, 5	; 5
		cli();										//alle Interrupts aus
 226:	f8 94       	cli
		TCCR4B &= 0xF0;							//alle Motoren stopp, Motor PWM aus
 228:	e1 ec       	ldi	r30, 0xC1	; 193
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	80 7f       	andi	r24, 0xF0	; 240
 230:	80 83       	st	Z, r24
		PORTB  &= 0x30;							//alle LEDs am Ring aus, Beeper und Motor right aus
 232:	85 b1       	in	r24, 0x05	; 5
 234:	80 73       	andi	r24, 0x30	; 48
 236:	85 b9       	out	0x05, r24	; 5
		PORTD  =  0x08;							//Motor left und alle IR-Sender aus
 238:	88 e0       	ldi	r24, 0x08	; 8
 23a:	8b b9       	out	0x0b, r24	; 11
		while(1)
		{
			PORTB^=(1<<LED_ROT);				//rote Duo LED blinkt in Endlsschleife = E N D E !!!!
 23c:	90 e2       	ldi	r25, 0x20	; 32
 23e:	85 b1       	in	r24, 0x05	; 5
 240:	89 27       	eor	r24, r25
 242:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	22 e5       	ldi	r18, 0x52	; 82
 248:	37 e0       	ldi	r19, 0x07	; 7
 24a:	81 50       	subi	r24, 0x01	; 1
 24c:	20 40       	sbci	r18, 0x00	; 0
 24e:	30 40       	sbci	r19, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <akkuzustand+0x58>
 252:	00 c0       	rjmp	.+0      	; 0x254 <akkuzustand+0x62>
 254:	00 00       	nop
 256:	f3 cf       	rjmp	.-26     	; 0x23e <akkuzustand+0x4c>
			_delay_ms(150);
		}
	}
}
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <roboter_init>:
=======
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 be 00 	call	0x17c	; 0x17c <adc_measure>
 228:	c1 50       	subi	r28, 0x01	; 1
 22a:	d9 f7       	brne	.-10     	; 0x222 <akkuzustand+0x4>
	if (akku >822)										//Akku voll,	 7,2V >= Vcc > 6,8V  grün
 22c:	87 33       	cpi	r24, 0x37	; 55
 22e:	23 e0       	ldi	r18, 0x03	; 3
 230:	92 07       	cpc	r25, r18
 232:	10 f0       	brcs	.+4      	; 0x238 <akkuzustand+0x1a>
	{PORTB|=(1<<LED_GRUEN); PORTB&=~(1<<LED_ROT);}
 234:	2c 9a       	sbi	0x05, 4	; 5
 236:	2d 98       	cbi	0x05, 5	; 5
	if ((akku<=822)&&(akku>744))						//Akku halbvoll, 6,8V >= Vcc > 6,4V  gelb
 238:	9c 01       	movw	r18, r24
 23a:	29 5e       	subi	r18, 0xE9	; 233
 23c:	32 40       	sbci	r19, 0x02	; 2
 23e:	2e 34       	cpi	r18, 0x4E	; 78
 240:	31 05       	cpc	r19, r1
 242:	10 f4       	brcc	.+4      	; 0x248 <akkuzustand+0x2a>
	{PORTB|=(1<<LED_GRUEN); PORTB|=(1<<LED_ROT);}
 244:	2c 9a       	sbi	0x05, 4	; 5
 246:	2d 9a       	sbi	0x05, 5	; 5
	if (akku<=744)										//Akku leer,	 6,4V >= Vcc		 rot +  ENDE
 248:	89 3e       	cpi	r24, 0xE9	; 233
 24a:	92 40       	sbci	r25, 0x02	; 2
 24c:	c0 f4       	brcc	.+48     	; 0x27e <akkuzustand+0x60>
	{PORTB&=~(1<<LED_GRUEN); PORTB|=(1<<LED_ROT);
 24e:	2c 98       	cbi	0x05, 4	; 5
 250:	2d 9a       	sbi	0x05, 5	; 5
		cli();										//alle Interrupts aus
 252:	f8 94       	cli
		TCCR4B &= 0xF0;							//alle Motoren stopp, Motor PWM aus
 254:	e1 ec       	ldi	r30, 0xC1	; 193
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	80 7f       	andi	r24, 0xF0	; 240
 25c:	80 83       	st	Z, r24
		PORTB  &= 0x30;							//alle LEDs am Ring aus, Beeper und Motor right aus
 25e:	85 b1       	in	r24, 0x05	; 5
 260:	80 73       	andi	r24, 0x30	; 48
 262:	85 b9       	out	0x05, r24	; 5
		PORTD  =  0x08;							//Motor left und alle IR-Sender aus
 264:	88 e0       	ldi	r24, 0x08	; 8
 266:	8b b9       	out	0x0b, r24	; 11
		while(1)
		{
			PORTB^=(1<<LED_ROT);				//rote Duo LED blinkt in Endlsschleife = E N D E !!!!
 268:	c0 e2       	ldi	r28, 0x20	; 32
 26a:	85 b1       	in	r24, 0x05	; 5
 26c:	8c 27       	eor	r24, r28
 26e:	85 b9       	out	0x05, r24	; 5
			_delay_ms(150);
 270:	66 e9       	ldi	r22, 0x96	; 150
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_delay_ms>
 27c:	f6 cf       	rjmp	.-20     	; 0x26a <akkuzustand+0x4c>
		}
	}
}
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <roboter_init>:
>>>>>>> 7b96c613b3198b9bd1a917b81cdcb6d159acd76e


void roboter_init(void)
{	
<<<<<<< HEAD
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
	CLKPR = 0x80;
 260:	e1 e6       	ldi	r30, 0x61	; 97
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 e8       	ldi	r24, 0x80	; 128
 266:	80 83       	st	Z, r24
	CLKPR = 0x00;						//CLK_IO = f_quarz = 16 MHz, Teiler 1
 268:	10 82       	st	Z, r1
=======
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
	CLKPR = 0x80;
 286:	e1 e6       	ldi	r30, 0x61	; 97
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 e8       	ldi	r24, 0x80	; 128
 28c:	80 83       	st	Z, r24
	CLKPR = 0x00;						//CLK_IO = f_quarz = 16 MHz, Teiler 1
 28e:	10 82       	st	Z, r1
>>>>>>> 7b96c613b3198b9bd1a917b81cdcb6d159acd76e
	

	//LED Pins
	DDRB = DDRB |(1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB3);	//LED Pins
<<<<<<< HEAD
 26a:	84 b1       	in	r24, 0x04	; 4
 26c:	8f 60       	ori	r24, 0x0F	; 15
 26e:	84 b9       	out	0x04, r24	; 4
=======
 290:	84 b1       	in	r24, 0x04	; 4
 292:	8f 60       	ori	r24, 0x0F	; 15
 294:	84 b9       	out	0x04, r24	; 4
>>>>>>> 7b96c613b3198b9bd1a917b81cdcb6d159acd76e
	//DDRD = DDRD |(1<<DDD2)|(1<<DDD3);						//Duo LED Pins		//Disabled for Bluetooth


	//Akkuspannung
	DDRF = DDRF &~(1<<MEASURE_UB);		//ADC0	PF0
<<<<<<< HEAD
 270:	80 98       	cbi	0x10, 0	; 16

	//Motoren Pins
	DDRB = DDRB | (1<<DDB6);			//PWM-Output OC4B für MOTOR_RECHTS
 272:	26 9a       	sbi	0x04, 6	; 4
	DDRD = DDRD | (1<<DDD7);			//PWM-Output OC4D für MOTOR_LINKS
 274:	57 9a       	sbi	0x0a, 7	; 10

	//Timer 4 im Fast PWM Mode konfigurieren
	TCCR4A = TCCR4A | (1<<PWM4B);
 276:	a0 ec       	ldi	r26, 0xC0	; 192
 278:	b0 e0       	ldi	r27, 0x00	; 0
 27a:	8c 91       	ld	r24, X
 27c:	81 60       	ori	r24, 0x01	; 1
 27e:	8c 93       	st	X, r24
	TCCR4C = TCCR4C | (1<<PWM4D);
 280:	e2 ec       	ldi	r30, 0xC2	; 194
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	81 60       	ori	r24, 0x01	; 1
 288:	80 83       	st	Z, r24
	TCCR4D = TCCR4D &~(1<<WGM41);
 28a:	c3 ec       	ldi	r28, 0xC3	; 195
 28c:	d0 e0       	ldi	r29, 0x00	; 0
 28e:	88 81       	ld	r24, Y
 290:	8d 7f       	andi	r24, 0xFD	; 253
 292:	88 83       	st	Y, r24
	TCCR4D = TCCR4D &~(1<<WGM40);		//Fast PWM am OC4B und OC4D
 294:	88 81       	ld	r24, Y
 296:	8e 7f       	andi	r24, 0xFE	; 254
 298:	88 83       	st	Y, r24

	TCCR4A = TCCR4A &~(1<<COM4B0);
 29a:	8c 91       	ld	r24, X
 29c:	8f 7e       	andi	r24, 0xEF	; 239
 29e:	8c 93       	st	X, r24
	TCCR4A = TCCR4A | (1<<COM4B1);		//COM4B1:0=2
=======
 296:	80 98       	cbi	0x10, 0	; 16

	//Motoren Pins
	DDRB = DDRB | (1<<DDB6);			//PWM-Output OC4B für MOTOR_RECHTS
 298:	26 9a       	sbi	0x04, 6	; 4
	DDRD = DDRD | (1<<DDD7);			//PWM-Output OC4D für MOTOR_LINKS
 29a:	57 9a       	sbi	0x0a, 7	; 10

	//Timer 4 im Fast PWM Mode konfigurieren
	TCCR4A = TCCR4A | (1<<PWM4B);
 29c:	a0 ec       	ldi	r26, 0xC0	; 192
 29e:	b0 e0       	ldi	r27, 0x00	; 0
>>>>>>> 7b96c613b3198b9bd1a917b81cdcb6d159acd76e
 2a0:	8c 91       	ld	r24, X
 2a2:	81 60       	ori	r24, 0x01	; 1
 2a4:	8c 93       	st	X, r24
<<<<<<< HEAD

	TCCR4C = TCCR4C &~(1<<COM4D0);
 2a6:	80 81       	ld	r24, Z
 2a8:	8b 7f       	andi	r24, 0xFB	; 251
 2aa:	80 83       	st	Z, r24
	TCCR4C = TCCR4C | (1<<COM4D1);		//COM4D1:0=2
 2ac:	80 81       	ld	r24, Z
 2ae:	88 60       	ori	r24, 0x08	; 8
 2b0:	80 83       	st	Z, r24

	TC4H = 0x03;
 2b2:	ef eb       	ldi	r30, 0xBF	; 191
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	83 e0       	ldi	r24, 0x03	; 3
 2b8:	80 83       	st	Z, r24
	OCR4C = 0xE8;						//f_PWM = f_CLK_T4/(1+OCR4C) = 62,5kHz/1000 = 62,5 Hz
 2ba:	88 ee       	ldi	r24, 0xE8	; 232
 2bc:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>
	TC4H = 0x00;
 2c0:	10 82       	st	Z, r1
	OCR4B = 94;							//Tastverhältnis am OC4B-Pin (PB6), PWM_rechts (retour_max = 62, vor_max = 125, stopp = 94)
 2c2:	8e e5       	ldi	r24, 0x5E	; 94
 2c4:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
	OCR4D = 94;							//Tastverhältnis am OC4D-Pin (PD7), PWM_links  (retour_max = 62, vor_max = 125, stopp = 94)
 2c8:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>


	TCCR4B = TCCR4B | (1<<CS43);
 2cc:	e1 ec       	ldi	r30, 0xC1	; 193
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	88 60       	ori	r24, 0x08	; 8
 2d4:	80 83       	st	Z, r24
	TCCR4B = TCCR4B &~(1<<CS42);
 2d6:	80 81       	ld	r24, Z
 2d8:	8b 7f       	andi	r24, 0xFB	; 251
 2da:	80 83       	st	Z, r24
	TCCR4B = TCCR4B &~(1<<CS41);		//f_CLK_T4 = CLK_IO/Prescaler = 16MHz/256 = 62,5kHz
 2dc:	80 81       	ld	r24, Z
 2de:	8d 7f       	andi	r24, 0xFD	; 253
 2e0:	80 83       	st	Z, r24
	TCCR4B = TCCR4B | (1<<CS40);		//Timer4 Prescaler = 1, Start PWM
 2e2:	80 81       	ld	r24, Z
 2e4:	81 60       	ori	r24, 0x01	; 1
 2e6:	80 83       	st	Z, r24
=======
	TCCR4C = TCCR4C | (1<<PWM4D);
 2a6:	e2 ec       	ldi	r30, 0xC2	; 194
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	81 60       	ori	r24, 0x01	; 1
 2ae:	80 83       	st	Z, r24
	TCCR4D = TCCR4D &~(1<<WGM41);
 2b0:	c3 ec       	ldi	r28, 0xC3	; 195
 2b2:	d0 e0       	ldi	r29, 0x00	; 0
 2b4:	88 81       	ld	r24, Y
 2b6:	8d 7f       	andi	r24, 0xFD	; 253
 2b8:	88 83       	st	Y, r24
	TCCR4D = TCCR4D &~(1<<WGM40);		//Fast PWM am OC4B und OC4D
 2ba:	88 81       	ld	r24, Y
 2bc:	8e 7f       	andi	r24, 0xFE	; 254
 2be:	88 83       	st	Y, r24

	TCCR4A = TCCR4A &~(1<<COM4B0);
 2c0:	8c 91       	ld	r24, X
 2c2:	8f 7e       	andi	r24, 0xEF	; 239
 2c4:	8c 93       	st	X, r24
	TCCR4A = TCCR4A | (1<<COM4B1);		//COM4B1:0=2
 2c6:	8c 91       	ld	r24, X
 2c8:	80 62       	ori	r24, 0x20	; 32
 2ca:	8c 93       	st	X, r24

	TCCR4C = TCCR4C &~(1<<COM4D0);
 2cc:	80 81       	ld	r24, Z
 2ce:	8b 7f       	andi	r24, 0xFB	; 251
 2d0:	80 83       	st	Z, r24
	TCCR4C = TCCR4C | (1<<COM4D1);		//COM4D1:0=2
 2d2:	80 81       	ld	r24, Z
 2d4:	88 60       	ori	r24, 0x08	; 8
 2d6:	80 83       	st	Z, r24

	TC4H = 0x03;
 2d8:	ef eb       	ldi	r30, 0xBF	; 191
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	83 e0       	ldi	r24, 0x03	; 3
 2de:	80 83       	st	Z, r24
	OCR4C = 0xE8;						//f_PWM = f_CLK_T4/(1+OCR4C) = 62,5kHz/1000 = 62,5 Hz
 2e0:	88 ee       	ldi	r24, 0xE8	; 232
 2e2:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>
	TC4H = 0x00;
 2e6:	10 82       	st	Z, r1
	OCR4B = 94;							//Tastverhältnis am OC4B-Pin (PB6), PWM_rechts (retour_max = 62, vor_max = 125, stopp = 94)
 2e8:	8e e5       	ldi	r24, 0x5E	; 94
 2ea:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
	OCR4D = 94;							//Tastverhältnis am OC4D-Pin (PD7), PWM_links  (retour_max = 62, vor_max = 125, stopp = 94)
 2ee:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>


	TCCR4B = TCCR4B | (1<<CS43);
 2f2:	e1 ec       	ldi	r30, 0xC1	; 193
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	88 60       	ori	r24, 0x08	; 8
 2fa:	80 83       	st	Z, r24
	TCCR4B = TCCR4B &~(1<<CS42);
 2fc:	80 81       	ld	r24, Z
 2fe:	8b 7f       	andi	r24, 0xFB	; 251
 300:	80 83       	st	Z, r24
	TCCR4B = TCCR4B &~(1<<CS41);		//f_CLK_T4 = CLK_IO/Prescaler = 16MHz/256 = 62,5kHz
 302:	80 81       	ld	r24, Z
 304:	8d 7f       	andi	r24, 0xFD	; 253
 306:	80 83       	st	Z, r24
	TCCR4B = TCCR4B | (1<<CS40);		//Timer4 Prescaler = 1, Start PWM
 308:	80 81       	ld	r24, Z
 30a:	81 60       	ori	r24, 0x01	; 1
 30c:	80 83       	st	Z, r24
	
	
	//Timer 0 for _delay_ms and _delay_us
	
	TCCR0A = 0x00;
 30e:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1<<CS01);
 310:	85 b5       	in	r24, 0x25	; 37
 312:	82 60       	ori	r24, 0x02	; 2
 314:	85 bd       	out	0x25, r24	; 37
	TCNT0 = PRELOAD_TIMER0;
 316:	8e ef       	ldi	r24, 0xFE	; 254
 318:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= (1 << TOIE0);
 31a:	ee e6       	ldi	r30, 0x6E	; 110
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	81 60       	ori	r24, 0x01	; 1
 322:	80 83       	st	Z, r24
>>>>>>> 7b96c613b3198b9bd1a917b81cdcb6d159acd76e


	
	akkuzustand();						//ein paar mal messen damit ADC warm läuft
<<<<<<< HEAD
 2e8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <akkuzustand>
	akkuzustand();
 2ec:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <akkuzustand>
	akkuzustand();
 2f0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <akkuzustand>
	akkuzustand();
 2f4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <akkuzustand>
	akkuzustand();
 2f8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <akkuzustand>
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <write_i2c>:
=======
 324:	0e 94 0f 01 	call	0x21e	; 0x21e <akkuzustand>
	akkuzustand();
 328:	0e 94 0f 01 	call	0x21e	; 0x21e <akkuzustand>
	akkuzustand();
 32c:	0e 94 0f 01 	call	0x21e	; 0x21e <akkuzustand>
	akkuzustand();
 330:	0e 94 0f 01 	call	0x21e	; 0x21e <akkuzustand>
	akkuzustand();
 334:	0e 94 0f 01 	call	0x21e	; 0x21e <akkuzustand>
}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <_delay_us>:
{
	while(counter_timer != (_ms*1000));
}

void _delay_us(long int _us)
{
 33e:	ab 01       	movw	r20, r22
 340:	bc 01       	movw	r22, r24
	while(counter_timer != _us);
 342:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 346:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 34a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 34e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 352:	84 17       	cp	r24, r20
 354:	95 07       	cpc	r25, r21
 356:	a6 07       	cpc	r26, r22
 358:	b7 07       	cpc	r27, r23
 35a:	d9 f7       	brne	.-10     	; 0x352 <_delay_us+0x14>
}
 35c:	08 95       	ret

0000035e <__vector_23>:


ISR(TIMER0_OVF_vect)												//Interrrupt sub routine timer 0 (8bit Timer)
{
 35e:	1f 92       	push	r1
 360:	0f 92       	push	r0
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	0f 92       	push	r0
 366:	11 24       	eor	r1, r1
 368:	8f 93       	push	r24
 36a:	9f 93       	push	r25
 36c:	af 93       	push	r26
 36e:	bf 93       	push	r27
	TCNT0 = PRELOAD_TIMER0;
 370:	8e ef       	ldi	r24, 0xFE	; 254
 372:	86 bd       	out	0x26, r24	; 38
	
	counter_timer++;
 374:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 378:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 37c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 380:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 384:	01 96       	adiw	r24, 0x01	; 1
 386:	a1 1d       	adc	r26, r1
 388:	b1 1d       	adc	r27, r1
 38a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 38e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 392:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 396:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
	if (counter_timer > 4294967290)
	{
		counter_timer = 4294967290;
	}
	
 39a:	bf 91       	pop	r27
 39c:	af 91       	pop	r26
 39e:	9f 91       	pop	r25
 3a0:	8f 91       	pop	r24
 3a2:	0f 90       	pop	r0
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	0f 90       	pop	r0
 3a8:	1f 90       	pop	r1
 3aa:	18 95       	reti

000003ac <write_i2c>:
>>>>>>> 7b96c613b3198b9bd1a917b81cdcb6d159acd76e

void LCD_string(char *data)
{
	while (*data != '\0')				//bis zum letzten Zeichen
	{LCD_data(*data++);}
}
<<<<<<< HEAD
 302:	ef e3       	ldi	r30, 0x3F	; 63
 304:	ff e1       	ldi	r31, 0x1F	; 31
 306:	31 97       	sbiw	r30, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <write_i2c+0x4>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <write_i2c+0xa>
 30c:	00 00       	nop
 30e:	ec eb       	ldi	r30, 0xBC	; 188
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	90 81       	ld	r25, Z
 314:	94 6a       	ori	r25, 0xA4	; 164
 316:	90 83       	st	Z, r25
 318:	90 81       	ld	r25, Z
 31a:	99 23       	and	r25, r25
 31c:	ec f7       	brge	.-6      	; 0x318 <write_i2c+0x16>
 31e:	8e 7f       	andi	r24, 0xFE	; 254
 320:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 324:	84 e8       	ldi	r24, 0x84	; 132
 326:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 32a:	ec eb       	ldi	r30, 0xBC	; 188
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	88 23       	and	r24, r24
 332:	ec f7       	brge	.-6      	; 0x32e <write_i2c+0x2c>
 334:	8a e0       	ldi	r24, 0x0A	; 10
 336:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 33a:	84 e8       	ldi	r24, 0x84	; 132
 33c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 340:	ec eb       	ldi	r30, 0xBC	; 188
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	88 23       	and	r24, r24
 348:	ec f7       	brge	.-6      	; 0x344 <write_i2c+0x42>
 34a:	86 2f       	mov	r24, r22
 34c:	80 62       	ori	r24, 0x20	; 32
 34e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 352:	84 e8       	ldi	r24, 0x84	; 132
 354:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 358:	ec eb       	ldi	r30, 0xBC	; 188
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	88 23       	and	r24, r24
 360:	ec f7       	brge	.-6      	; 0x35c <write_i2c+0x5a>
 362:	6f 7d       	andi	r22, 0xDF	; 223
 364:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 368:	84 e8       	ldi	r24, 0x84	; 132
 36a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 36e:	ec eb       	ldi	r30, 0xBC	; 188
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	88 23       	and	r24, r24
 376:	ec f7       	brge	.-6      	; 0x372 <write_i2c+0x70>
 378:	ec eb       	ldi	r30, 0xBC	; 188
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	84 69       	ori	r24, 0x94	; 148
 380:	80 83       	st	Z, r24
 382:	08 95       	ret

00000384 <LCD_data>:
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	d8 2f       	mov	r29, r24
 38a:	88 23       	and	r24, r24
 38c:	14 f0       	brlt	.+4      	; 0x392 <LCD_data+0xe>
 38e:	c0 ef       	ldi	r28, 0xF0	; 240
 390:	01 c0       	rjmp	.+2      	; 0x394 <LCD_data+0x10>
 392:	c8 ef       	ldi	r28, 0xF8	; 248
 394:	d6 ff       	sbrs	r29, 6
 396:	02 c0       	rjmp	.+4      	; 0x39c <LCD_data+0x18>
 398:	c4 60       	ori	r28, 0x04	; 4
 39a:	01 c0       	rjmp	.+2      	; 0x39e <LCD_data+0x1a>
 39c:	cb 7f       	andi	r28, 0xFB	; 251
 39e:	d5 ff       	sbrs	r29, 5
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <LCD_data+0x22>
 3a2:	c2 60       	ori	r28, 0x02	; 2
 3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <LCD_data+0x24>
 3a6:	cd 7f       	andi	r28, 0xFD	; 253
 3a8:	d4 ff       	sbrs	r29, 4
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <LCD_data+0x2c>
 3ac:	c1 60       	ori	r28, 0x01	; 1
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <LCD_data+0x2e>
 3b0:	ce 7f       	andi	r28, 0xFE	; 254
 3b2:	6c 2f       	mov	r22, r28
 3b4:	80 e4       	ldi	r24, 0x40	; 64
 3b6:	0e 94 81 01 	call	0x302	; 0x302 <write_i2c>
 3ba:	d3 ff       	sbrs	r29, 3
 3bc:	03 c0       	rjmp	.+6      	; 0x3c4 <LCD_data+0x40>
 3be:	6c 2f       	mov	r22, r28
 3c0:	68 60       	ori	r22, 0x08	; 8
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <LCD_data+0x44>
 3c4:	6c 2f       	mov	r22, r28
 3c6:	67 7f       	andi	r22, 0xF7	; 247
 3c8:	d2 ff       	sbrs	r29, 2
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <LCD_data+0x4c>
 3cc:	64 60       	ori	r22, 0x04	; 4
 3ce:	01 c0       	rjmp	.+2      	; 0x3d2 <LCD_data+0x4e>
 3d0:	6b 7f       	andi	r22, 0xFB	; 251
 3d2:	d1 ff       	sbrs	r29, 1
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <LCD_data+0x56>
 3d6:	62 60       	ori	r22, 0x02	; 2
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <LCD_data+0x58>
 3da:	6d 7f       	andi	r22, 0xFD	; 253
 3dc:	d0 ff       	sbrs	r29, 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <LCD_data+0x60>
 3e0:	61 60       	ori	r22, 0x01	; 1
 3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <LCD_data+0x62>
 3e4:	6e 7f       	andi	r22, 0xFE	; 254
 3e6:	80 e4       	ldi	r24, 0x40	; 64
 3e8:	0e 94 81 01 	call	0x302	; 0x302 <write_i2c>
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret

000003f2 <LCD_cmd>:
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
 3f6:	d8 2f       	mov	r29, r24
=======
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	d8 2f       	mov	r29, r24
 3b2:	c6 2f       	mov	r28, r22
 3b4:	62 e0       	ldi	r22, 0x02	; 2
 3b6:	70 e0       	ldi	r23, 0x00	; 0
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_delay_ms>
 3c0:	ec eb       	ldi	r30, 0xBC	; 188
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	84 6a       	ori	r24, 0xA4	; 164
 3c8:	80 83       	st	Z, r24
 3ca:	80 81       	ld	r24, Z
 3cc:	88 23       	and	r24, r24
 3ce:	ec f7       	brge	.-6      	; 0x3ca <write_i2c+0x1e>
 3d0:	de 7f       	andi	r29, 0xFE	; 254
 3d2:	d0 93 bb 00 	sts	0x00BB, r29	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 3d6:	84 e8       	ldi	r24, 0x84	; 132
 3d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3dc:	ec eb       	ldi	r30, 0xBC	; 188
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	88 23       	and	r24, r24
 3e4:	ec f7       	brge	.-6      	; 0x3e0 <write_i2c+0x34>
 3e6:	8a e0       	ldi	r24, 0x0A	; 10
 3e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 3ec:	84 e8       	ldi	r24, 0x84	; 132
 3ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3f2:	ec eb       	ldi	r30, 0xBC	; 188
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
>>>>>>> 7b96c613b3198b9bd1a917b81cdcb6d159acd76e
 3f8:	88 23       	and	r24, r24
 3fa:	ec f7       	brge	.-6      	; 0x3f6 <write_i2c+0x4a>
 3fc:	8c 2f       	mov	r24, r28
 3fe:	80 62       	ori	r24, 0x20	; 32
 400:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 404:	84 e8       	ldi	r24, 0x84	; 132
 406:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 40a:	ec eb       	ldi	r30, 0xBC	; 188
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	88 23       	and	r24, r24
 412:	ec f7       	brge	.-6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 414:	cf 7d       	andi	r28, 0xDF	; 223
 416:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 41a:	84 e8       	ldi	r24, 0x84	; 132
 41c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 420:	ec eb       	ldi	r30, 0xBC	; 188
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	88 23       	and	r24, r24
 428:	ec f7       	brge	.-6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 42a:	ec eb       	ldi	r30, 0xBC	; 188
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	84 69       	ori	r24, 0x94	; 148
 432:	80 83       	st	Z, r24
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <LCD_data>:
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	d8 2f       	mov	r29, r24
 440:	88 23       	and	r24, r24
 442:	14 f0       	brlt	.+4      	; 0x448 <LCD_data+0xe>
 444:	c0 ef       	ldi	r28, 0xF0	; 240
 446:	01 c0       	rjmp	.+2      	; 0x44a <LCD_data+0x10>
 448:	c8 ef       	ldi	r28, 0xF8	; 248
 44a:	d6 ff       	sbrs	r29, 6
 44c:	02 c0       	rjmp	.+4      	; 0x452 <LCD_data+0x18>
 44e:	c4 60       	ori	r28, 0x04	; 4
 450:	01 c0       	rjmp	.+2      	; 0x454 <LCD_data+0x1a>
 452:	cb 7f       	andi	r28, 0xFB	; 251
 454:	d5 ff       	sbrs	r29, 5
 456:	02 c0       	rjmp	.+4      	; 0x45c <LCD_data+0x22>
 458:	c2 60       	ori	r28, 0x02	; 2
 45a:	01 c0       	rjmp	.+2      	; 0x45e <LCD_data+0x24>
 45c:	cd 7f       	andi	r28, 0xFD	; 253
 45e:	d4 ff       	sbrs	r29, 4
 460:	02 c0       	rjmp	.+4      	; 0x466 <LCD_data+0x2c>
 462:	c1 60       	ori	r28, 0x01	; 1
 464:	01 c0       	rjmp	.+2      	; 0x468 <LCD_data+0x2e>
 466:	ce 7f       	andi	r28, 0xFE	; 254
 468:	6c 2f       	mov	r22, r28
 46a:	80 e4       	ldi	r24, 0x40	; 64
 46c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <write_i2c>
 470:	d3 ff       	sbrs	r29, 3
 472:	03 c0       	rjmp	.+6      	; 0x47a <LCD_data+0x40>
 474:	6c 2f       	mov	r22, r28
 476:	68 60       	ori	r22, 0x08	; 8
 478:	02 c0       	rjmp	.+4      	; 0x47e <LCD_data+0x44>
 47a:	6c 2f       	mov	r22, r28
 47c:	67 7f       	andi	r22, 0xF7	; 247
 47e:	d2 ff       	sbrs	r29, 2
 480:	02 c0       	rjmp	.+4      	; 0x486 <LCD_data+0x4c>
 482:	64 60       	ori	r22, 0x04	; 4
 484:	01 c0       	rjmp	.+2      	; 0x488 <LCD_data+0x4e>
 486:	6b 7f       	andi	r22, 0xFB	; 251
 488:	d1 ff       	sbrs	r29, 1
 48a:	02 c0       	rjmp	.+4      	; 0x490 <LCD_data+0x56>
 48c:	62 60       	ori	r22, 0x02	; 2
 48e:	01 c0       	rjmp	.+2      	; 0x492 <LCD_data+0x58>
 490:	6d 7f       	andi	r22, 0xFD	; 253
 492:	d0 ff       	sbrs	r29, 0
 494:	02 c0       	rjmp	.+4      	; 0x49a <LCD_data+0x60>
 496:	61 60       	ori	r22, 0x01	; 1
 498:	01 c0       	rjmp	.+2      	; 0x49c <LCD_data+0x62>
 49a:	6e 7f       	andi	r22, 0xFE	; 254
 49c:	80 e4       	ldi	r24, 0x40	; 64
<<<<<<< HEAD
 49e:	0e 94 81 01 	call	0x302	; 0x302 <write_i2c>
 4a2:	62 ee       	ldi	r22, 0xE2	; 226
 4a4:	80 e4       	ldi	r24, 0x40	; 64
 4a6:	0e 94 81 01 	call	0x302	; 0x302 <write_i2c>
 4aa:	62 ee       	ldi	r22, 0xE2	; 226
 4ac:	80 e4       	ldi	r24, 0x40	; 64
 4ae:	0e 94 81 01 	call	0x302	; 0x302 <write_i2c>
 4b2:	68 ee       	ldi	r22, 0xE8	; 232
 4b4:	80 e4       	ldi	r24, 0x40	; 64
 4b6:	0e 94 81 01 	call	0x302	; 0x302 <write_i2c>
 4ba:	60 ee       	ldi	r22, 0xE0	; 224
 4bc:	80 e4       	ldi	r24, 0x40	; 64
 4be:	0e 94 81 01 	call	0x302	; 0x302 <write_i2c>
 4c2:	68 ee       	ldi	r22, 0xE8	; 232
 4c4:	80 e4       	ldi	r24, 0x40	; 64
 4c6:	0e 94 81 01 	call	0x302	; 0x302 <write_i2c>
 4ca:	60 ee       	ldi	r22, 0xE0	; 224
 4cc:	80 e4       	ldi	r24, 0x40	; 64
 4ce:	0e 94 81 01 	call	0x302	; 0x302 <write_i2c>
 4d2:	61 ee       	ldi	r22, 0xE1	; 225
 4d4:	80 e4       	ldi	r24, 0x40	; 64
 4d6:	0e 94 81 01 	call	0x302	; 0x302 <write_i2c>
 4da:	60 ee       	ldi	r22, 0xE0	; 224
 4dc:	80 e4       	ldi	r24, 0x40	; 64
 4de:	0e 94 81 01 	call	0x302	; 0x302 <write_i2c>
 4e2:	63 ee       	ldi	r22, 0xE3	; 227
 4e4:	80 e4       	ldi	r24, 0x40	; 64
 4e6:	0e 94 81 01 	call	0x302	; 0x302 <write_i2c>
 4ea:	60 ee       	ldi	r22, 0xE0	; 224
 4ec:	80 e4       	ldi	r24, 0x40	; 64
 4ee:	0e 94 81 01 	call	0x302	; 0x302 <write_i2c>
 4f2:	6f ee       	ldi	r22, 0xEF	; 239
 4f4:	80 e4       	ldi	r24, 0x40	; 64
 4f6:	0e 94 81 01 	call	0x302	; 0x302 <write_i2c>
 4fa:	08 95       	ret

000004fc <I2C_init>:
=======
 49e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <write_i2c>
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <LCD_init>:
 4a8:	62 e3       	ldi	r22, 0x32	; 50
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_delay_ms>
 4b4:	63 ee       	ldi	r22, 0xE3	; 227
 4b6:	80 e4       	ldi	r24, 0x40	; 64
 4b8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <write_i2c>
 4bc:	6a e0       	ldi	r22, 0x0A	; 10
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_delay_ms>
 4c8:	63 ee       	ldi	r22, 0xE3	; 227
 4ca:	80 e4       	ldi	r24, 0x40	; 64
 4cc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <write_i2c>
 4d0:	68 ec       	ldi	r22, 0xC8	; 200
 4d2:	70 e0       	ldi	r23, 0x00	; 0
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 9f 01 	call	0x33e	; 0x33e <_delay_us>
 4dc:	63 ee       	ldi	r22, 0xE3	; 227
 4de:	80 e4       	ldi	r24, 0x40	; 64
 4e0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <write_i2c>
 4e4:	62 ee       	ldi	r22, 0xE2	; 226
 4e6:	80 e4       	ldi	r24, 0x40	; 64
 4e8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <write_i2c>
 4ec:	62 ee       	ldi	r22, 0xE2	; 226
 4ee:	80 e4       	ldi	r24, 0x40	; 64
 4f0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <write_i2c>
 4f4:	68 ee       	ldi	r22, 0xE8	; 232
 4f6:	80 e4       	ldi	r24, 0x40	; 64
 4f8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <write_i2c>
 4fc:	60 ee       	ldi	r22, 0xE0	; 224
 4fe:	80 e4       	ldi	r24, 0x40	; 64
 500:	0e 94 d6 01 	call	0x3ac	; 0x3ac <write_i2c>
 504:	68 ee       	ldi	r22, 0xE8	; 232
 506:	80 e4       	ldi	r24, 0x40	; 64
 508:	0e 94 d6 01 	call	0x3ac	; 0x3ac <write_i2c>
 50c:	60 ee       	ldi	r22, 0xE0	; 224
 50e:	80 e4       	ldi	r24, 0x40	; 64
 510:	0e 94 d6 01 	call	0x3ac	; 0x3ac <write_i2c>
 514:	61 ee       	ldi	r22, 0xE1	; 225
 516:	80 e4       	ldi	r24, 0x40	; 64
 518:	0e 94 d6 01 	call	0x3ac	; 0x3ac <write_i2c>
 51c:	60 ee       	ldi	r22, 0xE0	; 224
 51e:	80 e4       	ldi	r24, 0x40	; 64
 520:	0e 94 d6 01 	call	0x3ac	; 0x3ac <write_i2c>
 524:	63 ee       	ldi	r22, 0xE3	; 227
 526:	80 e4       	ldi	r24, 0x40	; 64
 528:	0e 94 d6 01 	call	0x3ac	; 0x3ac <write_i2c>
 52c:	60 ee       	ldi	r22, 0xE0	; 224
 52e:	80 e4       	ldi	r24, 0x40	; 64
 530:	0e 94 d6 01 	call	0x3ac	; 0x3ac <write_i2c>
 534:	6f ee       	ldi	r22, 0xEF	; 239
 536:	80 e4       	ldi	r24, 0x40	; 64
 538:	0e 94 d6 01 	call	0x3ac	; 0x3ac <write_i2c>
 53c:	08 95       	ret

0000053e <I2C_init>:
>>>>>>> 7b96c613b3198b9bd1a917b81cdcb6d159acd76e
	//
	////////////////////////////////////////////////////////////////////////////

	///////////////// IOCON konfigurieren ///////////////////
	
	TWCR = TWCR|(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		//START
<<<<<<< HEAD
 4fc:	ec eb       	ldi	r30, 0xBC	; 188
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	80 81       	ld	r24, Z
 502:	84 6a       	ori	r24, 0xA4	; 164
 504:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 506:	80 81       	ld	r24, Z
 508:	88 23       	and	r24, r24
 50a:	ec f7       	brge	.-6      	; 0x506 <I2C_init+0xa>

	TWDR = 0b01000000;									//Adr. 0100 000W + Write (W=0)
 50c:	80 e4       	ldi	r24, 0x40	; 64
 50e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//senden
 512:	84 e8       	ldi	r24, 0x84	; 132
 514:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 518:	ec eb       	ldi	r30, 0xBC	; 188
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	80 81       	ld	r24, Z
 51e:	88 23       	and	r24, r24
 520:	ec f7       	brge	.-6      	; 0x51c <I2C_init+0x20>

	TWDR = 0x05;										//Registeradr. IOCON schicken
 522:	85 e0       	ldi	r24, 0x05	; 5
 524:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//Registeradr. senden
 528:	84 e8       	ldi	r24, 0x84	; 132
 52a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 52e:	ec eb       	ldi	r30, 0xBC	; 188
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	88 23       	and	r24, r24
 536:	ec f7       	brge	.-6      	; 0x532 <I2C_init+0x36>
	
	TWDR = 0x2A;										//IOCON konfigurieren: Byte Mode, Slew Rate enable, kein Open Drain bei INTn, INTn actice-high
 538:	8a e2       	ldi	r24, 0x2A	; 42
 53a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//Konf. senden
 53e:	84 e8       	ldi	r24, 0x84	; 132
 540:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 544:	ec eb       	ldi	r30, 0xBC	; 188
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 81       	ld	r24, Z
 54a:	88 23       	and	r24, r24
 54c:	ec f7       	brge	.-6      	; 0x548 <I2C_init+0x4c>
	
	TWCR = TWCR|(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);		//STOP
 54e:	ec eb       	ldi	r30, 0xBC	; 188
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	84 69       	ori	r24, 0x94	; 148
 556:	80 83       	st	Z, r24
	

	///////////////// GP mit IODIR als OUTPUT konfigurieren ///////////////////
	
	TWCR = TWCR|(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		//START
 558:	80 81       	ld	r24, Z
 55a:	84 6a       	ori	r24, 0xA4	; 164
 55c:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 55e:	80 81       	ld	r24, Z
 560:	88 23       	and	r24, r24
 562:	ec f7       	brge	.-6      	; 0x55e <I2C_init+0x62>

	TWDR = 0b01000000;									//Adr. 0100 000W + Write (W=0)
 564:	80 e4       	ldi	r24, 0x40	; 64
 566:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//senden
=======
 53e:	ec eb       	ldi	r30, 0xBC	; 188
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	84 6a       	ori	r24, 0xA4	; 164
 546:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 548:	80 81       	ld	r24, Z
 54a:	88 23       	and	r24, r24
 54c:	ec f7       	brge	.-6      	; 0x548 <I2C_init+0xa>

	TWDR = 0b01000000;									//Adr. 0100 000W + Write (W=0)
 54e:	80 e4       	ldi	r24, 0x40	; 64
 550:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//senden
 554:	84 e8       	ldi	r24, 0x84	; 132
 556:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 55a:	ec eb       	ldi	r30, 0xBC	; 188
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	88 23       	and	r24, r24
 562:	ec f7       	brge	.-6      	; 0x55e <I2C_init+0x20>

	TWDR = 0x05;										//Registeradr. IOCON schicken
 564:	85 e0       	ldi	r24, 0x05	; 5
 566:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//Registeradr. senden
>>>>>>> 7b96c613b3198b9bd1a917b81cdcb6d159acd76e
 56a:	84 e8       	ldi	r24, 0x84	; 132
 56c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 570:	ec eb       	ldi	r30, 0xBC	; 188
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	80 81       	ld	r24, Z
 576:	88 23       	and	r24, r24
<<<<<<< HEAD
 578:	ec f7       	brge	.-6      	; 0x574 <I2C_init+0x78>

	TWDR = 0x00;										//Registeradr. IODIR schicken
 57a:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//Registeradr. senden
 57e:	84 e8       	ldi	r24, 0x84	; 132
 580:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 584:	ec eb       	ldi	r30, 0xBC	; 188
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	80 81       	ld	r24, Z
 58a:	88 23       	and	r24, r24
 58c:	ec f7       	brge	.-6      	; 0x588 <I2C_init+0x8c>
	
	TWDR = 0x00;										//IODIR konfigurieren, alle Pins als OUTPUT
 58e:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//Konf. senden
 592:	84 e8       	ldi	r24, 0x84	; 132
 594:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 598:	ec eb       	ldi	r30, 0xBC	; 188
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	80 81       	ld	r24, Z
 59e:	88 23       	and	r24, r24
 5a0:	ec f7       	brge	.-6      	; 0x59c <I2C_init+0xa0>
	
	TWCR = TWCR|(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);		//STOP
 5a2:	ec eb       	ldi	r30, 0xBC	; 188
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	80 81       	ld	r24, Z
 5a8:	84 69       	ori	r24, 0x94	; 148
 5aa:	80 83       	st	Z, r24
 5ac:	08 95       	ret

000005ae <main>:
=======
 578:	ec f7       	brge	.-6      	; 0x574 <I2C_init+0x36>
	
	TWDR = 0x2A;										//IOCON konfigurieren: Byte Mode, Slew Rate enable, kein Open Drain bei INTn, INTn actice-high
 57a:	8a e2       	ldi	r24, 0x2A	; 42
 57c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//Konf. senden
 580:	84 e8       	ldi	r24, 0x84	; 132
 582:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 586:	ec eb       	ldi	r30, 0xBC	; 188
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	88 23       	and	r24, r24
 58e:	ec f7       	brge	.-6      	; 0x58a <I2C_init+0x4c>
	
	TWCR = TWCR|(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);		//STOP
 590:	ec eb       	ldi	r30, 0xBC	; 188
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	80 81       	ld	r24, Z
 596:	84 69       	ori	r24, 0x94	; 148
 598:	80 83       	st	Z, r24
	

	///////////////// GP mit IODIR als OUTPUT konfigurieren ///////////////////
	
	TWCR = TWCR|(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		//START
 59a:	80 81       	ld	r24, Z
 59c:	84 6a       	ori	r24, 0xA4	; 164
 59e:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 5a0:	80 81       	ld	r24, Z
 5a2:	88 23       	and	r24, r24
 5a4:	ec f7       	brge	.-6      	; 0x5a0 <I2C_init+0x62>

	TWDR = 0b01000000;									//Adr. 0100 000W + Write (W=0)
 5a6:	80 e4       	ldi	r24, 0x40	; 64
 5a8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//senden
 5ac:	84 e8       	ldi	r24, 0x84	; 132
 5ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 5b2:	ec eb       	ldi	r30, 0xBC	; 188
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	88 23       	and	r24, r24
 5ba:	ec f7       	brge	.-6      	; 0x5b6 <I2C_init+0x78>

	TWDR = 0x00;										//Registeradr. IODIR schicken
 5bc:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//Registeradr. senden
 5c0:	84 e8       	ldi	r24, 0x84	; 132
 5c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 5c6:	ec eb       	ldi	r30, 0xBC	; 188
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	88 23       	and	r24, r24
 5ce:	ec f7       	brge	.-6      	; 0x5ca <I2C_init+0x8c>
	
	TWDR = 0x00;										//IODIR konfigurieren, alle Pins als OUTPUT
 5d0:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						//Konf. senden
 5d4:	84 e8       	ldi	r24, 0x84	; 132
 5d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));							//warten bis fertig
 5da:	ec eb       	ldi	r30, 0xBC	; 188
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	88 23       	and	r24, r24
 5e2:	ec f7       	brge	.-6      	; 0x5de <I2C_init+0xa0>
	
	TWCR = TWCR|(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);		//STOP
 5e4:	ec eb       	ldi	r30, 0xBC	; 188
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z
 5ea:	84 69       	ori	r24, 0x94	; 148
 5ec:	80 83       	st	Z, r24
 5ee:	08 95       	ret

000005f0 <main>:
>>>>>>> 7b96c613b3198b9bd1a917b81cdcb6d159acd76e
unsigned char bReceive = 0;

int main(void)
{
	
	JTAG_DISABLE();
 5f0:	85 b7       	in	r24, 0x35	; 53
 5f2:	80 68       	ori	r24, 0x80	; 128
 5f4:	85 bf       	out	0x35, r24	; 53
 5f6:	85 b7       	in	r24, 0x35	; 53
 5f8:	80 68       	ori	r24, 0x80	; 128
 5fa:	85 bf       	out	0x35, r24	; 53
    /************************************/
    /* I2C - IO - Expander				*/
    /************************************/

    DDRC |= IO_RESET;					//PC6 ist #RST vom Portexpander
 5fc:	3e 9a       	sbi	0x07, 6	; 7
    PORTC |= IO_RESET;					//Portexpander ein
 5fe:	46 9a       	sbi	0x08, 6	; 8

    TWBR = 12;							//TWBR=12, TWPS=0 im Reg. TWSR per default, damit f_SCL = 400 kHz
 600:	8c e0       	ldi	r24, 0x0C	; 12
 602:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    
    I2C_init();							//I2C Initialisierung
 606:	0e 94 9f 02 	call	0x53e	; 0x53e <I2C_init>
	LCD_init();
 60a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_init>
    roboter_init();
 60e:	0e 94 41 01 	call	0x282	; 0x282 <roboter_init>
	bluetooth_init();
 612:	0e 94 6a 00 	call	0xd4	; 0xd4 <bluetooth_init>
	
	sei();
 616:	78 94       	sei
	
	drive(MOT_FAST_STOPP, PWM_R_STOPP, MOT_FAST_STOPP, PWM_L_STOPP);
 618:	2e e5       	ldi	r18, 0x5E	; 94
 61a:	42 e0       	ldi	r20, 0x02	; 2
 61c:	6e e5       	ldi	r22, 0x5E	; 94
 61e:	82 e0       	ldi	r24, 0x02	; 2
 620:	0e 94 85 00 	call	0x10a	; 0x10a <drive>
    while (1) 
    {				
		//bprintf('a');
		
		
			LCD_data(bReceive);	
 624:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bReceive>
 628:	0e 94 1d 02 	call	0x43a	; 0x43a <LCD_data>
			
			bprintf(bReceive);
 62c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bReceive>
 630:	0e 94 7b 00 	call	0xf6	; 0xf6 <bprintf>
			
			bReceive=0;			
 634:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <bReceive>
 638:	f5 cf       	rjmp	.-22     	; 0x624 <main+0x34>

0000063a <__vector_25>:
	}
}


ISR(USART1_RX_vect)
{
 63a:	1f 92       	push	r1
 63c:	0f 92       	push	r0
 63e:	0f b6       	in	r0, 0x3f	; 63
 640:	0f 92       	push	r0
 642:	11 24       	eor	r1, r1
 644:	8f 93       	push	r24
	bReceive = UDR1;
 646:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 64a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bReceive>
}
 64e:	8f 91       	pop	r24
 650:	0f 90       	pop	r0
 652:	0f be       	out	0x3f, r0	; 63
 654:	0f 90       	pop	r0
 656:	1f 90       	pop	r1
 658:	18 95       	reti

0000065a <__muluhisi3>:
 65a:	0e 94 38 03 	call	0x670	; 0x670 <__umulhisi3>
 65e:	a5 9f       	mul	r26, r21
 660:	90 0d       	add	r25, r0
 662:	b4 9f       	mul	r27, r20
 664:	90 0d       	add	r25, r0
 666:	a4 9f       	mul	r26, r20
 668:	80 0d       	add	r24, r0
 66a:	91 1d       	adc	r25, r1
 66c:	11 24       	eor	r1, r1
 66e:	08 95       	ret

00000670 <__umulhisi3>:
 670:	a2 9f       	mul	r26, r18
 672:	b0 01       	movw	r22, r0
 674:	b3 9f       	mul	r27, r19
 676:	c0 01       	movw	r24, r0
 678:	a3 9f       	mul	r26, r19
 67a:	70 0d       	add	r23, r0
 67c:	81 1d       	adc	r24, r1
 67e:	11 24       	eor	r1, r1
 680:	91 1d       	adc	r25, r1
 682:	b2 9f       	mul	r27, r18
 684:	70 0d       	add	r23, r0
 686:	81 1d       	adc	r24, r1
 688:	11 24       	eor	r1, r1
 68a:	91 1d       	adc	r25, r1
 68c:	08 95       	ret

0000068e <_exit>:
 68e:	f8 94       	cli

00000690 <__stop_program>:
 690:	ff cf       	rjmp	.-2      	; 0x690 <__stop_program>
